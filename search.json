[{"path":"https://catalamarti.github.io/omopcept/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"Apache License","title":"Apache License","text":"Version 2.0, January 2004 <http://www.apache.org/licenses/>","code":""},{"path":[]},{"path":"https://catalamarti.github.io/omopcept/LICENSE.html","id":"id_1-definitions","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"1. Definitions","title":"Apache License","text":"“License” shall mean terms conditions use, reproduction, distribution defined Sections 1 9 document. “Licensor” shall mean copyright owner entity authorized copyright owner granting License. “Legal Entity” shall mean union acting entity entities control, controlled , common control entity. purposes definition, “control” means () power, direct indirect, cause direction management entity, whether contract otherwise, (ii) ownership fifty percent (50%) outstanding shares, (iii) beneficial ownership entity. “” (“”) shall mean individual Legal Entity exercising permissions granted License. “Source” form shall mean preferred form making modifications, including limited software source code, documentation source, configuration files. “Object” form shall mean form resulting mechanical transformation translation Source form, including limited compiled object code, generated documentation, conversions media types. “Work” shall mean work authorship, whether Source Object form, made available License, indicated copyright notice included attached work (example provided Appendix ). “Derivative Works” shall mean work, whether Source Object form, based (derived ) Work editorial revisions, annotations, elaborations, modifications represent, whole, original work authorship. purposes License, Derivative Works shall include works remain separable , merely link (bind name) interfaces , Work Derivative Works thereof. “Contribution” shall mean work authorship, including original version Work modifications additions Work Derivative Works thereof, intentionally submitted Licensor inclusion Work copyright owner individual Legal Entity authorized submit behalf copyright owner. purposes definition, “submitted” means form electronic, verbal, written communication sent Licensor representatives, including limited communication electronic mailing lists, source code control systems, issue tracking systems managed , behalf , Licensor purpose discussing improving Work, excluding communication conspicuously marked otherwise designated writing copyright owner “Contribution.” “Contributor” shall mean Licensor individual Legal Entity behalf Contribution received Licensor subsequently incorporated within Work.","code":""},{"path":"https://catalamarti.github.io/omopcept/LICENSE.html","id":"id_2-grant-of-copyright-license","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"2. Grant of Copyright License","title":"Apache License","text":"Subject terms conditions License, Contributor hereby grants perpetual, worldwide, non-exclusive, -charge, royalty-free, irrevocable copyright license reproduce, prepare Derivative Works , publicly display, publicly perform, sublicense, distribute Work Derivative Works Source Object form.","code":""},{"path":"https://catalamarti.github.io/omopcept/LICENSE.html","id":"id_3-grant-of-patent-license","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"3. Grant of Patent License","title":"Apache License","text":"Subject terms conditions License, Contributor hereby grants perpetual, worldwide, non-exclusive, -charge, royalty-free, irrevocable (except stated section) patent license make, made, use, offer sell, sell, import, otherwise transfer Work, license applies patent claims licensable Contributor necessarily infringed Contribution(s) alone combination Contribution(s) Work Contribution(s) submitted. institute patent litigation entity (including cross-claim counterclaim lawsuit) alleging Work Contribution incorporated within Work constitutes direct contributory patent infringement, patent licenses granted License Work shall terminate date litigation filed.","code":""},{"path":"https://catalamarti.github.io/omopcept/LICENSE.html","id":"id_4-redistribution","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"4. Redistribution","title":"Apache License","text":"may reproduce distribute copies Work Derivative Works thereof medium, without modifications, Source Object form, provided meet following conditions: () must give recipients Work Derivative Works copy License; (b) must cause modified files carry prominent notices stating changed files; (c) must retain, Source form Derivative Works distribute, copyright, patent, trademark, attribution notices Source form Work, excluding notices pertain part Derivative Works; (d) Work includes “NOTICE” text file part distribution, Derivative Works distribute must include readable copy attribution notices contained within NOTICE file, excluding notices pertain part Derivative Works, least one following places: within NOTICE text file distributed part Derivative Works; within Source form documentation, provided along Derivative Works; , within display generated Derivative Works, wherever third-party notices normally appear. contents NOTICE file informational purposes modify License. may add attribution notices within Derivative Works distribute, alongside addendum NOTICE text Work, provided additional attribution notices construed modifying License. may add copyright statement modifications may provide additional different license terms conditions use, reproduction, distribution modifications, Derivative Works whole, provided use, reproduction, distribution Work otherwise complies conditions stated License.","code":""},{"path":"https://catalamarti.github.io/omopcept/LICENSE.html","id":"id_5-submission-of-contributions","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"5. Submission of Contributions","title":"Apache License","text":"Unless explicitly state otherwise, Contribution intentionally submitted inclusion Work Licensor shall terms conditions License, without additional terms conditions. Notwithstanding , nothing herein shall supersede modify terms separate license agreement may executed Licensor regarding Contributions.","code":""},{"path":"https://catalamarti.github.io/omopcept/LICENSE.html","id":"id_6-trademarks","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"6. Trademarks","title":"Apache License","text":"License grant permission use trade names, trademarks, service marks, product names Licensor, except required reasonable customary use describing origin Work reproducing content NOTICE file.","code":""},{"path":"https://catalamarti.github.io/omopcept/LICENSE.html","id":"id_7-disclaimer-of-warranty","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"7. Disclaimer of Warranty","title":"Apache License","text":"Unless required applicable law agreed writing, Licensor provides Work (Contributor provides Contributions) “” BASIS, WITHOUT WARRANTIES CONDITIONS KIND, either express implied, including, without limitation, warranties conditions TITLE, NON-INFRINGEMENT, MERCHANTABILITY, FITNESS PARTICULAR PURPOSE. solely responsible determining appropriateness using redistributing Work assume risks associated exercise permissions License.","code":""},{"path":"https://catalamarti.github.io/omopcept/LICENSE.html","id":"id_8-limitation-of-liability","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"8. Limitation of Liability","title":"Apache License","text":"event legal theory, whether tort (including negligence), contract, otherwise, unless required applicable law (deliberate grossly negligent acts) agreed writing, shall Contributor liable damages, including direct, indirect, special, incidental, consequential damages character arising result License use inability use Work (including limited damages loss goodwill, work stoppage, computer failure malfunction, commercial damages losses), even Contributor advised possibility damages.","code":""},{"path":"https://catalamarti.github.io/omopcept/LICENSE.html","id":"id_9-accepting-warranty-or-additional-liability","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"9. Accepting Warranty or Additional Liability","title":"Apache License","text":"redistributing Work Derivative Works thereof, may choose offer, charge fee , acceptance support, warranty, indemnity, liability obligations /rights consistent License. However, accepting obligations, may act behalf sole responsibility, behalf Contributor, agree indemnify, defend, hold Contributor harmless liability incurred , claims asserted , Contributor reason accepting warranty additional liability. END TERMS CONDITIONS","code":""},{"path":"https://catalamarti.github.io/omopcept/LICENSE.html","id":"appendix-how-to-apply-the-apache-license-to-your-work","dir":"","previous_headings":"","what":"APPENDIX: How to apply the Apache License to your work","title":"Apache License","text":"apply Apache License work, attach following boilerplate notice, fields enclosed brackets [] replaced identifying information. (Don’t include brackets!) text enclosed appropriate comment syntax file format. also recommend file class name description purpose included “printed page” copyright notice easier identification within third-party archives.","code":"Copyright [yyyy] [name of copyright owner]  Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at    http://www.apache.org/licenses/LICENSE-2.0  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License."},{"path":"https://catalamarti.github.io/omopcept/articles/drug-classes.html","id":"tldr","dir":"Articles","previous_headings":"","what":"TLDR","title":"Getting drug classes from the OMOP hierarchy","text":"omopcept recently gained function omop_drug_lookup_create() create lookup table drug concept IDs drug classes ATC classification. create lookup table RxNorm Extension Ingredients :","code":"drug_lookup = omop_drug_lookup_create()"},{"path":"https://catalamarti.github.io/omopcept/articles/drug-classes.html","id":"use-case","dir":"Articles","previous_headings":"","what":"Use case","title":"Getting drug classes from the OMOP hierarchy","text":"Researchers want able identify drug classes omop extract specific drug names. Maybe 1. antibiotics 1. broad spectrum antibiotics 1. specific antibiotic classes","code":""},{"path":"https://catalamarti.github.io/omopcept/articles/drug-classes.html","id":"atc-a-who-drug-classification","dir":"Articles","previous_headings":"","what":"ATC a WHO drug classification","title":"Getting drug classes from the OMOP hierarchy","text":"ATC Anatomical Therapeutic Chemical Classification System maintained Defined Daily Dose (DDD) measuring unit “become gold standard international drug utilization monitoring research”. ATC, active substances classified hierarchy five levels. system fourteen main anatomical/pharmacological groups 1st levels. ATC main group divided 2nd levels either pharmacological therapeutic groups. 3rd 4th levels chemical, pharmacological therapeutic subgroups 5th level chemical substance.","code":""},{"path":"https://catalamarti.github.io/omopcept/articles/drug-classes.html","id":"atc-in-omop-via-rxnorm-extension-rxnorm","dir":"Articles","previous_headings":"","what":"ATC in OMOP via RxNorm Extension & RxNorm","title":"Getting drug classes from the OMOP hierarchy","text":"OMOP drug concept ID vocabularies RxNorm Extension & RxNorm ancestor concepts different levels ATC hierarchy. new omopcept function omop_drug_lookup_create() creates lookup table drug concept IDs drug classes ATC classification.","code":""},{"path":"https://catalamarti.github.io/omopcept/articles/drug-classes.html","id":"does-anything-else-already-do-this","dir":"Articles","previous_headings":"","what":"Does anything else already do this ?","title":"Getting drug classes from the OMOP hierarchy","text":"couldn’t quite get anything provide comprehensive list drug classes. Seems CodelistGenerator package things solve . CodelistGenerator::getATCCodes returns descendants ATC classes. @param level ATC level. Can one “ATC 1st”, “ATC 2nd”, “ATC 3rd”, “ATC 4th”, “ATC 5th” @param name ATC name interest. example, c(“Dermatologicals”, “Nervous System”), result list length two descendant concepts two particular ATC groups. show results CDM. ’d like comprehensive results help make sure want apply data.","code":"cdm <- mockVocabRef() #> Warning in validateCdmReference(cdm, soft = .softValidation): There are observation period end dates after the current date: 2025-06-30 #> ℹ The latest max observation period end date found is 2025-12-31 atc1 <- getATCCodes(cdm = cdm, level = \"ATC 1st\") # atc2 <- getATCCodes(cdm = cdm, level = \"ATC 2nd\") # Error in getATCCodes(cdm = cdm, level = \"ATC 2nd\") : 2 assertions failed: #  * - No matching ATC codes found #  * Variable 'atcCheck': Must be TRUE. # OLD exploration # eval=FALSE because much of this replaced by omop_drug_lookup_create()  #300k rows rxn <- omopcept::omop_names(\"\", v=\"RxNorm\")  omopfreqconceptclass(rxn)  # doesn't seem to have ATC classes I want ??  #    concept_class_id         n #    <chr>                <int> #  1 Clinical Drug        53083 #  2 Branded Drug         39083 #  3 Clinical Drug Comp   38474 #  4 Branded Drug Comp    36748 #  5 Branded Drug Form    26595 #  6 Branded Dose Group   23388 #  7 Clinical Drug Form   20773 #  8 Brand Name           19469 #  9 Clinical Dose Group  17741 # 10 Ingredient           15604 # 11 Multiple Ingredients  4469 # 12 Quant Clinical Drug   3860 # 13 Precise Ingredient    3476 # 14 Quant Branded Drug    3215 # 15 Branded Pack          1308 # 16 Clinical Pack         1175 # 17 Dose Form              201 # 18 Dose Form Group         47  # Aha, by looking at code for CodeListGenerator I see that the ATC classes are not in RxNorm but in a vocab called ATC  #6740 rows atc <- omopcept::omop_names(\"\", v=\"ATC\")  omopfreqconceptclass(atc) # 1 ATC 5th           5452 # 2 ATC 4th            911 # 3 ATC 3rd            269 # 4 ATC 2nd             94 # 5 ATC 1st             14  # TO be able to get ATC classes for any drug concept # take the ancestor table # filter all ancestor_concept_id that are in vocab ATC # can then use filter any descendant_concept_id that appears in user data # and should end up with vector of ATC classes at the different levels  #9 million ATC descendants !!  atc_descendants <- omop_concept_ancestor() |>    #ideally would do before collect   #but get Error in df[[id_col_name]] <- as.integer(df[[id_col_name]]) : cannot add bindings to a locked environment   #that I can probably fix in omopcept   #collect() |>    omop_join_name(namestart = \"ancestor\", columns = c(\"concept_name\",\"vocabulary_id\",\"concept_class_id\")) |>    #renaming of joined columns to differentiate ancestor & descendant   rename(ancestor_vocabulary_id = vocabulary_id) |>    rename(ancestor_concept_class_id = concept_class_id) |>     omop_join_name(namestart = \"descendant\", columns = c(\"concept_name\",\"vocabulary_id\",\"concept_class_id\")) |>    rename(descendant_vocabulary_id = vocabulary_id) |>    rename(descendant_concept_class_id = concept_class_id) |>    collect() |>      #head(100) |>    filter(ancestor_vocabulary_id==\"ATC\")   atc_descendants |> count(descendant_vocabulary_id, sort=TRUE) # 1 RxNorm Extension         8732808 # 2 RxNorm                    819887 # 3 ATC                        30849 # 4 HCPCS                        140 # 5 HemOnc                        66  atc_descendants |> count(ancestor_concept_class_id, sort=TRUE)  #8.7m rows atc_rxnormext_descendants <- atc_descendants |>    filter(descendant_vocabulary_id == \"RxNorm Extension\") |>    select(ATC_concept_id = ancestor_concept_id,          ATC_concept_name = ancestor_concept_name,          drug_concept_id = descendant_concept_id,          drug_concept_name = descendant_concept_name,          ATC_level = ancestor_concept_class_id,          #this is RxNormExtension concept class e.g. Branded Drug etc.          #probably don't need because it will be in drug_exposure table          #but may be useful here during development          concept_class_id = descendant_concept_class_id          ) |>     #extract numeric part of the ATC level    mutate(ATC_level = str_sub(ATC_level,5,5))  atc_rxnormext_descendants |> count(concept_class_id, sort=TRUE)  #  1 Marketed Product    2692126 #  2 Branded Drug Box    1084960 #  3 Branded Drug         856819 #  4 Branded Drug Comp    710365 #  5 Branded Drug Form    569727 #  6 Clinical Drug Box    532821 #  7 Quant Branded Drug   467679 #  8 Quant Branded Box    411968 #  9 Quant Clinical Drug  346667 # 10 Clinical Drug        333783 # 11 Quant Clinical Box   324265 # 12 Clinical Drug Comp   200522 # 13 Clinical Drug Form   151217 # 14 Branded Pack          16291 # 15 Clinical Pack         12935 # 16 Ingredient             8911 # 17 Branded Pack Box       6604 # 18 Clinical Pack Box      5148  #SOMETHING NOT RIGHT ? SEEMS CAN'T FIND MANY DRUGS IN HERE  #TODO check in one of UCLH extracts what the values of RxNormExt concept_class_id are #e.g. is it just Ingredient ?  atc_rxnormext_ingredient <- atc_rxnormext_descendants |>    filter(concept_class_id %in% c(\"Ingredient\"))  atc2ingredients <- atc_rxnormext_ingredient |>    filter(ATC_level %in% c(\"ATC 1st\"))  atc_rxnormext_clinicaldrug <- atc_rxnormext_descendants |>    filter(concept_class_id %in% c(\"Clinical Drug\"))  atc_tmp <- atc_rxnormext_descendants |> head(1000)  atc_from_rxnormext_ingredient <- atc_rxnormext_ingredient |>  #atc_from_rxnormext_wide <- atc_rxnormext_descendants |>  #atc_from_rxnormext_wide <- atc_tmp |>    pivot_wider(names_from = ATC_level,                values_from = c(ATC_concept_name, ATC_concept_id),                id_cols=c(drug_concept_name, drug_concept_id))  # Warning message: # Values from `ATC_concept_id` and `ATC_concept_name` are not uniquely identified; output will contain list-cols. # Use the following dplyr code to identify duplicates. # 800k rows ! #dup <- atc_rxnormext_descendants |> dup <- atc_rxnormext_ingredient |>     dplyr::summarise(n = dplyr::n(), .by = c(drug_concept_name, drug_concept_id, ATC_level)) |>   dplyr::filter(n > 1L)  # SO a drug can be in more than one ATC class  # lets have a look at a single drug example  drugname <- \"biapenem\" drugname <- \"Bromisoval\" #apparently has 37 duplicates !! drugname <- \"Azidamfenicol\" #10 duplicates  oneingredient <- atc_rxnormext_descendants |>    filter(drug_concept_name == drugname) |>    arrange(ATC_level)  #biapenem has single entry per ATC level #   ATC_concept_id ATC_concept_name                 drug_concept_id drug_concept_name ATC_level concept_class_id # 1       21602795 ANTIINFECTIVES FOR SYSTEMIC USE         35198093 biapenem          ATC 1st   Ingredient       # 2       21602796 ANTIBACTERIALS FOR SYSTEMIC USE         35198093 biapenem          ATC 2nd   Ingredient       # 3       21602868 OTHER BETA-LACTAM ANTIBACTERIALS        35198093 biapenem          ATC 3rd   Ingredient       # 4       21602920 Carbapenems                             35198093 biapenem          ATC 4th   Ingredient       # 5       21602924 biapenem; parenteral                    35198093 biapenem          ATC 5th   Ingredient    #but e.g. Azidamfenicol has multiple entries in all ATC levels #suggests that maybe we need multiple rows per drug (i.e. keep data long) #perhaps function can offer option for short & long ? #OR maybe start by producing a long lookup table because we are close to that already #  #even Bromisoval, most duplicates are in level 5 #oneingredient |> count(ATC_level, sort=TRUE) # 1 ATC 5th      37 # 2 ATC 4th       6 # 3 ATC 3rd       4 # 4 ATC 1st       1 # 5 ATC 2nd       1  #TEMPTED to try to plot relationships of ATC levels #probably 1-3   #I think we may want ATC (3rd level, pharmacological subgroup) atc3_rxnormext_descendants <- atc_descendants |>    filter(descendant_vocabulary_id == \"RxNorm Extension\") |>    filter(ancestor_concept_class_id == \"ATC 3rd\")  atc2_rxnormext_descendants <- atc_descendants |>    filter(descendant_vocabulary_id == \"RxNorm Extension\") |>    filter(ancestor_concept_class_id == \"ATC 2nd\")  atc1_rxnormext_descendants <- atc_descendants |>    filter(descendant_vocabulary_id == \"RxNorm Extension\") |>    filter(ancestor_concept_class_id == \"ATC 1st\")  #234 rows at ATC3 freq_atc3 <- atc3_rxnormext_descendants |> count(ancestor_concept_name, sort=TRUE) #90 rows at ATC2 freq_atc2 <- atc2_rxnormext_descendants |> count(ancestor_concept_name, sort=TRUE) #14 rows at ATC1 freq_atc1 <- atc1_rxnormext_descendants |> count(ancestor_concept_name, sort=TRUE)  cyto <- atc3_rxnormext_descendants |>    filter(ancestor_concept_name == \"CYTOTOXIC ANTIBIOTICS AND RELATED SUBSTANCES\")  #amoxicillin etc. beta <- atc3_rxnormext_descendants |>    filter(ancestor_concept_name == \"BETA-LACTAM ANTIBACTERIALS, PENICILLINS\")  #OTHER BETA-LACTAM ANTIBACTERIALS   #find what level2 is for level3= \"BETA-LACTAM ANTIBACTERIALS, PENICILLINS\" beta_atc2 <- atc_descendants |>    filter(ancestor_concept_class_id == \"ATC 2nd\") |>    filter(descendant_concept_name == \"BETA-LACTAM ANTIBACTERIALS, PENICILLINS\")    anti_atc3 <- atc_descendants |>    filter(ancestor_concept_name == \"ANTIBACTERIALS FOR SYSTEMIC USE\" ) |>    filter(descendant_concept_class_id == \"ATC 3rd\")  anti_atc4 <- atc_descendants |>    filter(ancestor_concept_name == \"ANTIBACTERIALS FOR SYSTEMIC USE\" ) |>    filter(descendant_concept_class_id == \"ATC 4th\")  beta_atc1 <- atc_descendants |>    filter(ancestor_concept_class_id == \"ATC 1st\") |>    filter(descendant_concept_name == \"BETA-LACTAM ANTIBACTERIALS, PENICILLINS\")   a3_and_4 <- bind_rows(anti_atc3, anti_atc4)  #SO WHAT WE COULD DO is create a post-processing script that will add columns to the omop extracts for ATC2,3,& 4 likely to be most useful #TODO #write a function addATC_to_drug_concepts() #want to add 1 column for each ATC level #probably by filtering all ATC levels & then doing pivot_wider()"},{"path":"https://catalamarti.github.io/omopcept/articles/getting-omop-concept-data.html","id":"details-of-vocab-storage","dir":"Articles","previous_headings":"","what":"Details of vocab storage","title":"getting-omop-concept-data","text":"omopcept default downloads selection vocabularies stores locally first time use (recommended data location R packages). download need repeated unless update package. Vocabularies stored parquet files can queried memory-efficient manner without first read data memory. omopcept::omop_vocab_table_save() used save parquet files package stored online. also use omop_vocab_table_save(=*) save vocab parquet files online location.","code":""},{"path":"https://catalamarti.github.io/omopcept/articles/hierarchy-for-blood-counts.html","id":"use-case","dir":"Articles","previous_headings":"","what":"Use case","title":"Exploring OMOP hierarchy for blood counts","text":"need map blood count components two different source systems OMOP. different potential OMOP concept ids. choose ? deal situation different institutions end different OMOP concept ids essentially measure.","code":""},{"path":"https://catalamarti.github.io/omopcept/articles/hierarchy-for-blood-counts.html","id":"leukocytes","dir":"Articles","previous_headings":"Use case","what":"Leukocytes","title":"Exploring OMOP hierarchy for blood counts","text":"Starting single concept id 3010813 (chosen mapping process) number Leukocytes volume blood. Using omopcept find immediate relations “Leukocytes [#/volume] Blood” relations Leukocytes | Blood | Hematology Cell counts looks like may useful, concept_class_id LOINC Hierarchy following relations. Can find similar hierarchy parents blood count concepts ? Seems yes, > 400 concepts match “*Blood | Hematology Cell counts”. can similar erythrocytes leukocytes. See https://github.com/OHDSI/Vocabulary-v5.0/issues/301 info ","code":"lvbg <- omop_id(3010813)  lvbg |>    select(-valid_start_date,-valid_end_date,-invalid_reason) |>    kable() leuk_r <- omop_relations(3010813)  leuk_r |> arrange(relationship_id) |>   select(relationship_id,concept_name_2,domain_id,concept_class_id) |>    kable() lbhcc_r <- omop_relations(37043992) |>    arrange(relationship_id)   lbhcc_r |>   select(relationship_id,concept_name_2,domain_id,concept_class_id) |>    kable() #lbhcc_r |>  #  omop_graph( graphtitle = \"\", saveplot = FALSE ) #new fixed=TRUE arg for omop_names() allows this  bhccounts <- omop_names(\"Blood | Hematology and Cell counts\", fixed=TRUE) |>    #returning 452 concepts   #removing those for Fetus   filter(!str_detect(concept_name,\"Fetus\"))   #now down to 417 concepts  #can I filter out desired one from this ? #ery <- bhccounts |>  #  filter(concept_name, starts_with(\"Erythrocytes |\"))  #it is id 37059055 ery_r <- omop_relations(37059055)  ery_r |>    select(relationship_id,concept_name_2,domain_id,concept_class_id) |>    kable()"},{"path":"https://catalamarti.github.io/omopcept/articles/query-and-graph-concept-hierarchies.html","id":"example-1---query-relations-of-a-concept-and-visualise","dir":"Articles","previous_headings":"","what":"Example 1 - query relations of a concept and visualise","title":"query-and-graph-concept-hierarchies","text":"find single SNOMED concept, search ’s relations relations (nsteps=2) create graph hierarchy.  case relations one domain didn’t need show legend.","code":"sharp <- omop_names(\"Accident caused by sharp-edged object\", standard=\"S\")  relations <- omop_relations(sharp$concept_id,                              r_ids=c('Is a','Subsumes'),                              nsteps=2)   # nodetxtsize made small to make plot visible in vignette, default=9 fine outside omop_graph(relations, saveplot=FALSE,             graphtitle=NULL, legendshow=FALSE, nodetxtsize=1, textcolourvar=\"step\")"},{"path":"https://catalamarti.github.io/omopcept/articles/query-and-graph-concept-hierarchies.html","id":"example-2-a-tree-plot-for-cancer-staging-data","dir":"Articles","previous_headings":"","what":"Example 2 a tree plot for cancer staging data","title":"query-and-graph-concept-hierarchies","text":"AJCC (American Joint Committee Cancer) hierarchical staging classification different versions. represented OMOP Cancer Modifiers.","code":"ajcc8 <- omop_names(\"AJCC/UICC 8th edition\", exact=TRUE)  ajcc_rel1 <- omop_relations(ajcc8$concept_id, nsteps=1)  #TODO find a quicker example of getting more than one relations step  # getting recursive relations takes a few minutes #ajcc_rel2 <- omop_relations(ajcc8$concept_id, nsteps=2)  # plot is too big to display nicely in this vignette # but is auto saved in a nice to pdf # omop_graph(ajcc_rel1, ggrlayout=\"tree\",  #            legendshow = FALSE, saveplot = TRUE,  #            width = 150, nodetxtangle = 45)"},{"path":"https://catalamarti.github.io/omopcept/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Andy South. Author, maintainer.","code":""},{"path":"https://catalamarti.github.io/omopcept/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"South (2025). omopcept: Tools query OMOP conCEPTs standard health vocabularies (pros cons!). R package version 0.0.6.1, https://SAFEHR-data.github.io/omopcept/.","code":"@Manual{,   title = {omopcept: Tools to query OMOP conCEPTs for standard health vocabularies (all pros no cons!)},   author = {Andy South},   year = {2025},   note = {R package version 0.0.6.1},   url = {https://SAFEHR-data.github.io/omopcept/}, }"},{"path":"https://catalamarti.github.io/omopcept/index.html","id":"omopcept","dir":"","previous_headings":"","what":"Tools to query OMOP conCEPTs for standard health vocabularies (all pros no cons!)","title":"Tools to query OMOP conCEPTs for standard health vocabularies (all pros no cons!)","text":"Active development 2025, breaking changes possible omopcept provides access OMOP conCEPTs (pros, cons!). Makes super-easy get names associated concept IDs allows exploration visualisation OMOP hierarchies. Link poster & report presented OHDSI Global Symposium 2024. omopcept provides R functions : modern flexible tidyverse compatible memory efficient (using arrow parquet) omopcept includes concise named copies functions designed interactive use e.g. oid() onames() search concept ids names respectively. example line can used return ~ 1000 OMOP ids SNOMED codes clinical drugs starting .","code":"onames(\"^a\",d=\"DRUG\",v=\"SNOMED\",cc=\"Clinical Drug\")"},{"path":"https://catalamarti.github.io/omopcept/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Tools to query OMOP conCEPTs for standard health vocabularies (all pros no cons!)","text":"Install development version omopcept :","code":"# install.packages(\"remotes\")  remotes::install_github(\"SAFEHR-data/omopcept\")"},{"path":"https://catalamarti.github.io/omopcept/index.html","id":"omop-vocabularies-data","dir":"","previous_headings":"","what":"OMOP vocabularies data","title":"Tools to query OMOP conCEPTs for standard health vocabularies (all pros no cons!)","text":"OMOP vocabularies can searched downloaded Athena – OHDSI vocabularies repository. omopcept provides R tools interact OMOP concepts reproducible way. omopcept can use vocabulary files downloaded Athena, automatically download subset vocabularies saved cloud.","code":""},{"path":"https://catalamarti.github.io/omopcept/index.html","id":"getting-started-with-omopcept","dir":"","previous_headings":"","what":"Getting started with omopcept","title":"Tools to query OMOP conCEPTs for standard health vocabularies (all pros no cons!)","text":"initial use omopcept tries download OMOP vocabulary files cloud local package cache can accessed future sessions. arrow R package allows parquet files opened queried dplyr pipelines without read data. e.g. code return just top rows concept table.","code":"library(omopcept)  omop_concept() |>    head() |>    dplyr::collect()"},{"path":[]},{"path":"https://catalamarti.github.io/omopcept/index.html","id":"omop-outline","dir":"","previous_headings":"","what":"OMOP outline","title":"Tools to query OMOP conCEPTs for standard health vocabularies (all pros no cons!)","text":"OMOP Common Data Model open standard health data. “[] designed standardize structure content observational data enable efficient analyses can produce reliable evidence”. OMOP maintained OHDSI (pronounced “Odyssey”). “Observational Health Data Sciences Informatics program multi-stakeholder, interdisciplinary collaborative strives improve medical decision making bring better health outcomes patients around world.”","code":""},{"path":"https://catalamarti.github.io/omopcept/index.html","id":"omop-vocabularies-in-the-background","dir":"","previous_headings":"","what":"OMOP vocabularies in the background","title":"Tools to query OMOP conCEPTs for standard health vocabularies (all pros no cons!)","text":"Vocabularies downloaded Athena include tables called CONCEPT.csv, CONCEPT_ANCESTOR.csv CONCEPT_RELATIONSHIP.csv. two main options : manually download selected vocabulary csv files Athena, use omopcept::omop_vocabs_preprocess() automatically download pre-processed vocabulary files saved cloud us omopcept downloads selection vocabularies stores locally first time use (recommended data location R packages). download need repeated update package. Vocabularies stored parquet files can queried memory-efficient manner without first read data memory.","code":""},{"path":[]},{"path":"https://catalamarti.github.io/omopcept/index.html","id":"omop_names-query-concepts-by-their-names","dir":"","previous_headings":"","what":"omop_names(): query concepts by their names","title":"Tools to query OMOP conCEPTs for standard health vocabularies (all pros no cons!)","text":"","code":"omop_names(\"chemotherapy\", v_ids=\"LOINC\") #> # A tibble: 71 × 10 #>    concept_id concept_name              domain_id vocabulary_id concept_class_id #>         <int> <chr>                     <chr>     <chr>         <chr>            #>  1    1035179 Chemotherapy - IV         Meas Val… LOINC         Answer           #>  2    1035159 Chemotherapy - Oral       Meas Val… LOINC         Answer           #>  3    1035128 Chemotherapy - Other      Meas Val… LOINC         Answer           #>  4   45882480 Chemotherapy, NOS         Meas Val… LOINC         Answer           #>  5   45876436 Chemotherapy Administered Meas Val… LOINC         Answer           #>  6   45884295 Unknown if any chemother… Meas Val… LOINC         Answer           #>  7   45880125 No chemotherapy administ… Meas Val… LOINC         Answer           #>  8   45879751 Chemotherapy              Meas Val… LOINC         Answer           #>  9   45882373 Chemotherapy spill        Meas Val… LOINC         Answer           #> 10   45878374 Chemotherapy, single age… Meas Val… LOINC         Answer           #> # ℹ 61 more rows #> # ℹ 5 more variables: standard_concept <chr>, concept_code <chr>, #> #   valid_start_date <date>, valid_end_date <date>, invalid_reason <chr>  omop_names(\"chemotherapy\", v_ids=c(\"LOINC\",\"SNOMED\"), d_ids=c(\"Observation\",\"Procedure\")) #> # A tibble: 316 × 10 #>    concept_id concept_name              domain_id vocabulary_id concept_class_id #>         <int> <chr>                     <chr>     <chr>         <chr>            #>  1   36305649 Chemotherapy infusion st… Observat… LOINC         Clinical Observ… #>  2   36305185 Chemotherapy infusion st… Observat… LOINC         Clinical Observ… #>  3   36305554 Chemotherapy infusion st… Observat… LOINC         Clinical Observ… #>  4   36305537 Chemotherapy infusion st… Observat… LOINC         Clinical Observ… #>  5   36660670 Cancer chemotherapy rece… Observat… LOINC         Clinical Observ… #>  6    3046488 Chemotherapy [Minimum Da… Observat… LOINC         Survey           #>  7   40768860 Cancer chemotherapy rece… Observat… LOINC         Clinical Observ… #>  8   36303659 Guidance for chemoemboli… Procedure LOINC         Clinical Observ… #>  9    1024644 Guidance for chemoemboli… Observat… LOINC         LOINC Component  #> 10    1004252 Flag for Date 1st chemot… Observat… LOINC         LOINC Component  #> # ℹ 306 more rows #> # ℹ 5 more variables: standard_concept <chr>, concept_code <chr>, #> #   valid_start_date <date>, valid_end_date <date>, invalid_reason <chr>"},{"path":"https://catalamarti.github.io/omopcept/index.html","id":"omop_join_name-join-concept-names-onto-a-concept_id-dataframe-column","dir":"","previous_headings":"","what":"omop_join_name(): join concept names onto a *concept_id dataframe column","title":"Tools to query OMOP conCEPTs for standard health vocabularies (all pros no cons!)","text":"Helps interpret OMOP data.","code":"data.frame(concept_id=(c(3571338L,4002075L))) |>    omop_join_name() #> # A tibble: 2 × 2 #>   concept_id concept_name      #>        <int> <chr>             #> 1    3571338 Problem behaviour #> 2    4002075 BLUE LOTION    data.frame(drug_concept_id=(c(4000794L,4002592L))) |>    omop_join_name(namestart=\"drug\") #> # A tibble: 2 × 2 #>   drug_concept_id drug_concept_name       #>             <int> <chr>                   #> 1         4000794 BUZZ OFF                #> 2         4002592 DEXAMETHASONE INJECTION"},{"path":"https://catalamarti.github.io/omopcept/index.html","id":"omop_join_name_all-join-concept-names-onto-all-_concept_id-columns-in-a-dataframe","dir":"","previous_headings":"","what":"omop_join_name_all(): join concept names onto all *_concept_id columns in a dataframe","title":"Tools to query OMOP conCEPTs for standard health vocabularies (all pros no cons!)","text":"","code":"data.frame(concept_id=(c(3571338L,3655355L)),             drug_concept_id=(c(4000794L,35628998L))) |>             omop_join_name_all() #> # A tibble: 2 × 4 #>   concept_id concept_name         drug_concept_id drug_concept_name              #>        <int> <chr>                          <int> <chr>                          #> 1    3571338 Problem behaviour            4000794 BUZZ OFF                       #> 2    3655355 Erectile dysfunction        35628998 Retired SNOMED UK Drug extens…"},{"path":"https://catalamarti.github.io/omopcept/index.html","id":"omop_graph-starting-to-visualise-omop-hierarchies","dir":"","previous_headings":"","what":"omop_graph(): starting to visualise OMOP hierarchies","title":"Tools to query OMOP conCEPTs for standard health vocabularies (all pros no cons!)","text":"","code":"sharp <- omop_names(\"Accident caused by sharp-edged object\", standard=\"S\")  relations <- omop_relations(sharp$concept_id,                              r_ids=c('Is a','Subsumes'),                              nsteps=2)   omop_graph(relations, saveplot=FALSE, graphtitle=NULL,             legendshow=FALSE, nodetxtsize=5, textcolourvar=\"step\") #>  #> The downloaded binary packages are in #>  /var/folders/pl/k11lm9710hlgl02nvzx4z9wr0000gp/T//RtmpDoD4KN/downloaded_packages #>  #> The downloaded binary packages are in #>  /var/folders/pl/k11lm9710hlgl02nvzx4z9wr0000gp/T//RtmpDoD4KN/downloaded_packages"},{"path":"https://catalamarti.github.io/omopcept/index.html","id":"vocabularies-included","dir":"","previous_headings":"","what":"Vocabularies included","title":"Tools to query OMOP conCEPTs for standard health vocabularies (all pros no cons!)","text":"vocabularies omopcept downloads automatically default download Athena extra vocabs added. wish control vocabularies included can manually download vocabulary csv files Athena.","code":""},{"path":"https://catalamarti.github.io/omopcept/index.html","id":"numbers-of-concepts-in-automatic-omopcept-vocabulary-download-by-domain-and-vocabulary","dir":"","previous_headings":"Vocabularies included","what":"Numbers of concepts in automatic omopcept vocabulary download by domain and vocabulary","title":"Tools to query OMOP conCEPTs for standard health vocabularies (all pros no cons!)","text":"","code":"library(dplyr) library(ggplot2) library(forcats)  concept_summary <-    omop_concept() |>   count(vocabulary_id, sort=TRUE) |>    collect()  ggplot(concept_summary,aes(y=reorder(vocabulary_id,n),x=n,col=vocabulary_id)) +   geom_point() +   labs(y = \"vocabulary_id\") +   guides(col=\"none\") +   theme_minimal()"},{"path":"https://catalamarti.github.io/omopcept/index.html","id":"acknowledgements","dir":"","previous_headings":"Vocabularies included","what":"Acknowledgements","title":"Tools to query OMOP conCEPTs for standard health vocabularies (all pros no cons!)","text":"Development omopcept partly supported UCLH Biomedical Research Centre.","code":""},{"path":"https://catalamarti.github.io/omopcept/reference/check_c_id.html","id":null,"dir":"Reference","previous_headings":"","what":"check c_id arg to omop_ancestors() and omop_descendants() TODO want to not export but couldn't get to work when not exported — check_c_id","title":"check c_id arg to omop_ancestors() and omop_descendants() TODO want to not export but couldn't get to work when not exported — check_c_id","text":"check c_id arg omop_ancestors() omop_descendants() TODO want export get work exported","code":""},{"path":"https://catalamarti.github.io/omopcept/reference/check_c_id.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"check c_id arg to omop_ancestors() and omop_descendants() TODO want to not export but couldn't get to work when not exported — check_c_id","text":"","code":"check_c_id(c_id)"},{"path":"https://catalamarti.github.io/omopcept/reference/check_c_id.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"check c_id arg to omop_ancestors() and omop_descendants() TODO want to not export but couldn't get to work when not exported — check_c_id","text":"c_id arg check : single omop concept_id exact concept_name get ancestors ","code":""},{"path":"https://catalamarti.github.io/omopcept/reference/check_c_id.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"check c_id arg to omop_ancestors() and omop_descendants() TODO want to not export but couldn't get to work when not exported — check_c_id","text":"","code":"# example code c_id <- 1633308 check_c_id(c_id) #> Warning: downloading a subset of omop vocab files, pre-processed. #> If you want to make sure you have the vocabs you need, download from Athena, save locally & call `omop_vocabs_preprocess()` #> downloading concept file, may take a few minutes, this only needs to be repeated if the package is re-installed #>      c_id             name1 #> 1 1633308 AJCC/UICC Stage 4"},{"path":"https://catalamarti.github.io/omopcept/reference/dynamic_by.html","id":null,"dir":"Reference","previous_headings":"","what":"Produces a list from string variables suitable for use in join expressions — dynamic_by","title":"Produces a list from string variables suitable for use in join expressions — dynamic_by","text":"Produces list string variables suitable use join expressions","code":""},{"path":"https://catalamarti.github.io/omopcept/reference/dynamic_by.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Produces a list from string variables suitable for use in join expressions — dynamic_by","text":"","code":"dynamic_by(lhs, rhs)"},{"path":"https://catalamarti.github.io/omopcept/reference/dynamic_by.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Produces a list from string variables suitable for use in join expressions — dynamic_by","text":"lhs string column name left side join rhs string column name right side join","code":""},{"path":"https://catalamarti.github.io/omopcept/reference/dynamic_by.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Produces a list from string variables suitable for use in join expressions — dynamic_by","text":"","code":"# left_join(df1,df2, by = dynamic_by(variable,\"concept_id\"))"},{"path":"https://catalamarti.github.io/omopcept/reference/get_plot_dims.html","id":null,"dir":"Reference","previous_headings":"","what":"set plot dimensions from a string e.g. ","title":"set plot dimensions from a string e.g. ","text":"options \"A4\",\"A4l\",\"A3\",\"A3l\",\"A2\",\"A2l\",\"A1\",\"A1l\",\"A0\",\"A0l\",\"slide\",\"slidehalf\"","code":""},{"path":"https://catalamarti.github.io/omopcept/reference/get_plot_dims.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"set plot dimensions from a string e.g. ","text":"","code":"get_plot_dims(canvas)"},{"path":"https://catalamarti.github.io/omopcept/reference/get_plot_dims.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"set plot dimensions from a string e.g. ","text":"canvas string defining canvas size \"A4\" \"A4l\" landscape etc.","code":""},{"path":"https://catalamarti.github.io/omopcept/reference/get_plot_dims.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"set plot dimensions from a string e.g. ","text":"list width, height, units","code":""},{"path":"https://catalamarti.github.io/omopcept/reference/get_plot_dims.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"set plot dimensions from a string e.g. ","text":"","code":"get_plot_dims(\"A1\") #> $width #> [1] 594 #>  #> $height #> [1] 841 #>  #> $units #> [1] \"mm\" #>"},{"path":"https://catalamarti.github.io/omopcept/reference/omop_ancestors.html","id":null,"dir":"Reference","previous_headings":"","what":"find omop concept ancestors of one passed — omop_ancestors","title":"find omop concept ancestors of one passed — omop_ancestors","text":"find omop concept ancestors one passed super short name func find ancestors","code":""},{"path":"https://catalamarti.github.io/omopcept/reference/omop_ancestors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"find omop concept ancestors of one passed — omop_ancestors","text":"","code":"omop_ancestors(   c_id = NULL,   c_ids = NULL,   d_ids = NULL,   v_ids = NULL,   cc_ids = NULL,   standard = NULL,   separation = NULL,   itself = FALSE,   messages = TRUE )  oance(   c_id = NULL,   c_ids = NULL,   d_ids = NULL,   v_ids = NULL,   cc_ids = NULL,   standard = NULL,   separation = NULL,   itself = FALSE,   messages = TRUE )"},{"path":"https://catalamarti.github.io/omopcept/reference/omop_ancestors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"find omop concept ancestors of one passed — omop_ancestors","text":"c_id single omop concept_id exact concept_name get ancestors , default NULL returns c_ids one concept_id filter , default NULL d_ids one domain_id filter , default NULL v_ids one vocabulary_id filter , default NULL cc_ids one concept_class_id filter , default NULL standard one standard_concept filter , default NULL , S,C separation levels separation filter , default NULL whether include passed concept returned table (min_levels_of_separation==0), default=FALSE messages whether print info messages, default=TRUE","code":""},{"path":"https://catalamarti.github.io/omopcept/reference/omop_ancestors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"find omop concept ancestors of one passed — omop_ancestors","text":"dataframe concepts attributes","code":""},{"path":"https://catalamarti.github.io/omopcept/reference/omop_ancestors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"find omop concept ancestors of one passed — omop_ancestors","text":"","code":"omop_ancestors(1633308) #> querying concept ancestors of: AJCC/UICC Stage 4 - may take a few seconds #> Warning: downloading a subset of omop vocab files, pre-processed. #> If you want to make sure you have the vocabs you need, download from Athena, save locally & call `omop_vocabs_preprocess()` #> downloading concept_ancestor file, may take a few minutes, this only needs to be repeated if the package is re-installed #> returning 2 concepts #> # A tibble: 2 × 14 #>   concept_id descendant_concept_id descendant_concept_n…¹ min_levels_of_separa…² #>        <int>                 <int> <chr>                                   <int> #> 1     734320               1633308 AJCC/UICC Stage 4                           1 #> 2    1633987               1633308 AJCC/UICC Stage 4                           1 #> # ℹ abbreviated names: ¹​descendant_concept_name, ²​min_levels_of_separation #> # ℹ 10 more variables: max_levels_of_separation <int>, concept_name <chr>, #> #   domain_id <chr>, vocabulary_id <chr>, concept_class_id <chr>, #> #   standard_concept <chr>, concept_code <chr>, valid_start_date <date>, #> #   valid_end_date <date>, invalid_reason <chr> #omop_ancestors(\"Non-invasive blood pressure\") #omop_ancestors(\"Non-invasive blood pressure\",separation=c(1,2)) #epoch_ance <- omop_ancestors(\"EPOCH, dose-escalated\") #no filtering by ancestors #cman <- omop_ancestors(v_ids=\"Cancer Modifier\") # because of R argument matching, you can just use the first unique letters of # arguments e.g. v for v_ids, cc for cc_ids chemodrugs <- odesc(\"Cytotoxic chemotherapeutic\", v=\"HemOnc\", d=\"Regimen\") #> querying concept descendants of: Cytotoxic chemotherapeutic - may take a few seconds #> returning 357 concepts"},{"path":"https://catalamarti.github.io/omopcept/reference/omop_cdm_combine.html","id":null,"dir":"Reference","previous_headings":"","what":"combine two omop cdm (Common Data Model) instances initially works on lists NOTE these omop_cdm* functions are for omop extracts rather than the concepts and may be best moved to another package TODO could be modified relatively easily to work on >2 extracts up to 9 :-) TODO get it to work on folder names by calling omop_cdm_read() — omop_cdm_combine","title":"combine two omop cdm (Common Data Model) instances initially works on lists NOTE these omop_cdm* functions are for omop extracts rather than the concepts and may be best moved to another package TODO could be modified relatively easily to work on >2 extracts up to 9 :-) TODO get it to work on folder names by calling omop_cdm_read() — omop_cdm_combine","text":"combine two omop cdm (Common Data Model) instances initially works lists NOTE omop_cdm* functions omop extracts rather concepts may best moved another package TODO modified relatively easily work >2 extracts 9 :-) TODO get work folder names calling omop_cdm_read()","code":""},{"path":"https://catalamarti.github.io/omopcept/reference/omop_cdm_combine.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"combine two omop cdm (Common Data Model) instances initially works on lists NOTE these omop_cdm* functions are for omop extracts rather than the concepts and may be best moved to another package TODO could be modified relatively easily to work on >2 extracts up to 9 :-) TODO get it to work on folder names by calling omop_cdm_read() — omop_cdm_combine","text":"","code":"omop_cdm_combine(   cdm1,   cdm2,   make_care_site_id_unique = TRUE,   make_ids_unique = TRUE,   add_care_site_name_to_person_id_tables = TRUE )"},{"path":"https://catalamarti.github.io/omopcept/reference/omop_cdm_combine.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"combine two omop cdm (Common Data Model) instances initially works on lists NOTE these omop_cdm* functions are for omop extracts rather than the concepts and may be best moved to another package TODO could be modified relatively easily to work on >2 extracts up to 9 :-) TODO get it to work on folder names by calling omop_cdm_read() — omop_cdm_combine","text":"cdm1 list containing cdm tables cdm2 list containing cdm tables make_care_site_id_unique whether set care_site_id 1 & 2 instance, default TRUE make_ids_unique whether uniqueify IDs (multiply 10 & add extractnum), default TRUE add_care_site_name_to_person_id_tables whether add column tables person_id","code":""},{"path":"https://catalamarti.github.io/omopcept/reference/omop_cdm_combine.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"combine two omop cdm (Common Data Model) instances initially works on lists NOTE these omop_cdm* functions are for omop extracts rather than the concepts and may be best moved to another package TODO could be modified relatively easily to work on >2 extracts up to 9 :-) TODO get it to work on folder names by calling omop_cdm_read() — omop_cdm_combine","text":"list containing merged omop tables","code":""},{"path":"https://catalamarti.github.io/omopcept/reference/omop_cdm_combine.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"combine two omop cdm (Common Data Model) instances initially works on lists NOTE these omop_cdm* functions are for omop extracts rather than the concepts and may be best moved to another package TODO could be modified relatively easily to work on >2 extracts up to 9 :-) TODO get it to work on folder names by calling omop_cdm_read() — omop_cdm_combine","text":"","code":"#test creation of new ids when overlap pids1 <- 1:3 pids2 <- 1:2 cdm1 <- list(person=data.frame(person_id=pids1,age=21:23,care_site_id=1L),              measurement=data.frame(person_id=pids1,meas=5:7),              care_site=data.frame(care_site_id=1L, care_site_name=\"hospital1\")) cdm2 <- list(person=data.frame(person_id=pids2,age=91:92,care_site_id=2L),             measurement=data.frame(person_id=pids2,meas=15:16),             care_site=data.frame(care_site_id=1L, care_site_name=\"hospital2\"),             death=data.frame(person_id=pids2,d=c(0,1))) cdm3 <- omop_cdm_combine(cdm1, cdm2) #> uniquefied columns :  person$person_id measurement$person_id #> uniquefied columns :  person$person_id measurement$person_id death$person_id #an example testing coping with different column classes #it shouldn't really happen due to omop spec #but does sometimes e.g. when csvs have been read in wrong cdmint <- list(measurement=data.frame(person_id=pids1,meas=5:7)) cdmtime <- list(measurement=data.frame(person_id=pids1,meas=strptime(\"12:30:00\", \"%H:%M:%S\"))) cdmna <- list(measurement=data.frame(person_id=pids1,meas=NA)) cdmchar <- list(measurement=data.frame(person_id=pids1,meas=\"A\")) #TODO this causes an error because I couldn't work an easy way to fix #cd3 <- omop_cdm_combine(cdmtime,cdmchar)"},{"path":"https://catalamarti.github.io/omopcept/reference/omop_cdm_read.html","id":null,"dir":"Reference","previous_headings":"","what":"read all omop tables from a folder containing parquet or csv files into a list advantage that you don't need to specify table names NOTE these omop_cdm* functions are for omop extracts rather than the concepts and may be best moved to another package — omop_cdm_read","title":"read all omop tables from a folder containing parquet or csv files into a list advantage that you don't need to specify table names NOTE these omop_cdm* functions are for omop extracts rather than the concepts and may be best moved to another package — omop_cdm_read","text":"read omop tables folder containing parquet csv files list advantage need specify table names NOTE omop_cdm* functions omop extracts rather concepts may best moved another package","code":""},{"path":"https://catalamarti.github.io/omopcept/reference/omop_cdm_read.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"read all omop tables from a folder containing parquet or csv files into a list advantage that you don't need to specify table names NOTE these omop_cdm* functions are for omop extracts rather than the concepts and may be best moved to another package — omop_cdm_read","text":"","code":"omop_cdm_read(path, filetype = \"parquet\", lowercasenames = TRUE)"},{"path":"https://catalamarti.github.io/omopcept/reference/omop_cdm_read.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"read all omop tables from a folder containing parquet or csv files into a list advantage that you don't need to specify table names NOTE these omop_cdm* functions are for omop extracts rather than the concepts and may be best moved to another package — omop_cdm_read","text":"path path folder containing files filetype default \"parquet\" option \"csv\" lowercasenames whether make table names lowercase, default TRUE","code":""},{"path":"https://catalamarti.github.io/omopcept/reference/omop_cdm_read.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"read all omop tables from a folder containing parquet or csv files into a list advantage that you don't need to specify table names NOTE these omop_cdm* functions are for omop extracts rather than the concepts and may be best moved to another package — omop_cdm_read","text":"list containing omop tables","code":""},{"path":"https://catalamarti.github.io/omopcept/reference/omop_cdm_read.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"read all omop tables from a folder containing parquet or csv files into a list advantage that you don't need to specify table names NOTE these omop_cdm* functions are for omop extracts rather than the concepts and may be best moved to another package — omop_cdm_read","text":"","code":"#omop = omop_cdm_read(path,filetype=\"csv\") #TODO woulkd be good to have a minimal example file in the package #and to have a test that integer guessing works correctly"},{"path":"https://catalamarti.github.io/omopcept/reference/omop_cdm_table_read.html","id":null,"dir":"Reference","previous_headings":"","what":"read single omop table from parquet or csv file NOTE these omop_cdm* functions are for omop extracts rather than the concepts and may be best moved to another package — omop_cdm_table_read","title":"read single omop table from parquet or csv file NOTE these omop_cdm* functions are for omop extracts rather than the concepts and may be best moved to another package — omop_cdm_table_read","text":"read single omop table parquet csv file NOTE omop_cdm* functions omop extracts rather concepts may best moved another package","code":""},{"path":"https://catalamarti.github.io/omopcept/reference/omop_cdm_table_read.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"read single omop table from parquet or csv file NOTE these omop_cdm* functions are for omop extracts rather than the concepts and may be best moved to another package — omop_cdm_table_read","text":"","code":"omop_cdm_table_read(tablename, path, filetype = \"parquet\")"},{"path":"https://catalamarti.github.io/omopcept/reference/omop_cdm_table_read.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"read single omop table from parquet or csv file NOTE these omop_cdm* functions are for omop extracts rather than the concepts and may be best moved to another package — omop_cdm_table_read","text":"tablename name omop table e.g. \"person\" path file path filetype default \"parquet\" option \"csv\"","code":""},{"path":"https://catalamarti.github.io/omopcept/reference/omop_cdm_table_read.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"read single omop table from parquet or csv file NOTE these omop_cdm* functions are for omop extracts rather than the concepts and may be best moved to another package — omop_cdm_table_read","text":"dataframe","code":""},{"path":"https://catalamarti.github.io/omopcept/reference/omop_cdm_table_read.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"read single omop table from parquet or csv file NOTE these omop_cdm* functions are for omop extracts rather than the concepts and may be best moved to another package — omop_cdm_table_read","text":"","code":"#person = omop_cdm_table_read(\"person\",path)"},{"path":"https://catalamarti.github.io/omopcept/reference/omop_check_names.html","id":null,"dir":"Reference","previous_headings":"","what":"check that concept names and ids match in a passed table — omop_check_names","title":"check that concept names and ids match in a passed table — omop_check_names","text":"check concept names ids match passed table super short name func check concept names","code":""},{"path":"https://catalamarti.github.io/omopcept/reference/omop_check_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"check that concept names and ids match in a passed table — omop_check_names","text":"","code":"omop_check_names(   df,   id_col_name = \"concept_id\",   name_col_name = \"concept_name\" )  ochecknames(df, id_col_name = \"concept_id\", name_col_name = \"concept_name\")"},{"path":"https://catalamarti.github.io/omopcept/reference/omop_check_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"check that concept names and ids match in a passed table — omop_check_names","text":"df dataframe id_col_name name id column, default=\"concept_id\" name_col_name name name column, default=\"concept_name\"","code":""},{"path":"https://catalamarti.github.io/omopcept/reference/omop_check_names.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"check that concept names and ids match in a passed table — omop_check_names","text":"","code":"#example1 should pass, because names are joined from vocab data.frame(concept_id=c(3571338L,4002075L)) |> omop_join_name() |> omop_check_names() #> all 2 names and ids match #> # A tibble: 0 × 4 #> # ℹ 4 variables: concept_id <int>, concept_name <chr>, #> #   concept_name_to_check <chr>, check <lgl> #example2 with an incorrect name tst <- data.frame(concept_id=c(4052465L,4052465L),                   concept_name=c(\"test wrong name\",\"Ex-pipe smoker\")) |>            omop_check_names() #> Warning: 1 names and ids don't match #> 4052465Ex-pipe smokertest wrong nameFALSE"},{"path":"https://catalamarti.github.io/omopcept/reference/omop_codes.html","id":null,"dir":"Reference","previous_headings":"","what":"string search of concept_code in omop concepts table — omop_codes","title":"string search of concept_code in omop concepts table — omop_codes","text":"string search concept_code omop concepts table super short name func search concepts concept_code","code":""},{"path":"https://catalamarti.github.io/omopcept/reference/omop_codes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"string search of concept_code in omop concepts table — omop_codes","text":"","code":"omop_codes(   findstring,   ignore_case = TRUE,   exact = TRUE,   fixed = FALSE,   c_ids = NULL,   d_ids = NULL,   v_ids = NULL,   cc_ids = NULL,   standard = NULL,   messages = TRUE )  ocodes(   findstring,   ignore_case = TRUE,   exact = TRUE,   fixed = FALSE,   c_ids = NULL,   d_ids = NULL,   v_ids = NULL,   cc_ids = NULL,   standard = NULL,   messages = TRUE )"},{"path":"https://catalamarti.github.io/omopcept/reference/omop_codes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"string search of concept_code in omop concepts table — omop_codes","text":"findstring string search regex ignore_case ignore case string comparison, default TRUE exact TRUE exact string search, \"start\" exact start, \"end\" exact end, default=TRUE user likely look whole code fixed default FALSE allows regex,TRUE uses grepl exact matching c_ids one concept_id filter , default NULL d_ids one domain_id filter , default NULL v_ids one vocabulary_id filter , default NULL cc_ids one concept_class_id filter , default NULL standard one standard_concept filter , default NULL , S,C messages whether print info messages, default=TRUE","code":""},{"path":"https://catalamarti.github.io/omopcept/reference/omop_codes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"string search of concept_code in omop concepts table — omop_codes","text":"","code":"omop_codes(\"81752-8\") #> returning 1 concepts #> # A tibble: 1 × 10 #>   concept_id concept_name               domain_id vocabulary_id concept_class_id #>        <int> <chr>                      <chr>     <chr>         <chr>            #> 1   21494134 Chromosome region 1q21 du… Measurem… LOINC         Lab Test         #> # ℹ 5 more variables: standard_concept <chr>, concept_code <chr>, #> #   valid_start_date <date>, valid_end_date <date>, invalid_reason <chr> omop_codes(\"AJCC/UICC-Stage\",exact=FALSE) #> returning 720 concepts #> # A tibble: 720 × 10 #>    concept_id concept_name            domain_id   vocabulary_id concept_class_id #>         <int> <chr>                   <chr>       <chr>         <chr>            #>  1    1635658 AJCC/UICC 6th Stage 0   Measurement Cancer Modif… Staging/Grading  #>  2    1633642 AJCC/UICC 6th Stage 0a  Measurement Cancer Modif… Staging/Grading  #>  3    1635189 AJCC/UICC 6th Stage 0is Measurement Cancer Modif… Staging/Grading  #>  4    1634888 AJCC/UICC 6th Stage 1   Measurement Cancer Modif… Staging/Grading  #>  5    1634027 AJCC/UICC 6th Stage 1A  Measurement Cancer Modif… Staging/Grading  #>  6    1633734 AJCC/UICC 6th Stage 1A1 Measurement Cancer Modif… Staging/Grading  #>  7    1634553 AJCC/UICC 6th Stage 1A2 Measurement Cancer Modif… Staging/Grading  #>  8    1634171 AJCC/UICC 6th Stage 1A3 Measurement Cancer Modif… Staging/Grading  #>  9    1634604 AJCC/UICC 6th Stage 1B  Measurement Cancer Modif… Staging/Grading  #> 10    1635608 AJCC/UICC 6th Stage 1B1 Measurement Cancer Modif… Staging/Grading  #> # ℹ 710 more rows #> # ℹ 5 more variables: standard_concept <chr>, concept_code <chr>, #> #   valid_start_date <date>, valid_end_date <date>, invalid_reason <chr> ocodes(\"AJCC/UICC-Stage\") #> returning 0 concepts #> # A tibble: 0 × 10 #> # ℹ 10 variables: concept_id <int>, concept_name <chr>, domain_id <chr>, #> #   vocabulary_id <chr>, concept_class_id <chr>, standard_concept <chr>, #> #   concept_code <chr>, valid_start_date <date>, valid_end_date <date>, #> #   invalid_reason <chr>"},{"path":"https://catalamarti.github.io/omopcept/reference/omop_concept.html","id":null,"dir":"Reference","previous_headings":"","what":"open a reference to omop concept file(s) from provided location — omop_concept","title":"open a reference to omop concept file(s) from provided location — omop_concept","text":"defaults package cache used omop_vocab_table_save()","code":""},{"path":"https://catalamarti.github.io/omopcept/reference/omop_concept.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"open a reference to omop concept file(s) from provided location — omop_concept","text":"","code":"omop_concept(location = tools::R_user_dir(\"omopcept\", which = \"cache\"))  oc(location = tools::R_user_dir(\"omopcept\", which = \"cache\"))"},{"path":"https://catalamarti.github.io/omopcept/reference/omop_concept.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"open a reference to omop concept file(s) from provided location — omop_concept","text":"location url file location, defaults package cache","code":""},{"path":"https://catalamarti.github.io/omopcept/reference/omop_concept.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"open a reference to omop concept file(s) from provided location — omop_concept","text":"","code":"# open reference, query and collect data to dataframe omop_concept() |> head() |> dplyr::collect() #> # A tibble: 6 × 10 #>   concept_id concept_name               domain_id vocabulary_id concept_class_id #>        <int> <chr>                      <chr>     <chr>         <chr>            #> 1   45756805 Pediatric Cardiology       Provider  ABMS          Physician Speci… #> 2   45756804 Pediatric Anesthesiology   Provider  ABMS          Physician Speci… #> 3   45756803 Pathology-Anatomic / Path… Provider  ABMS          Physician Speci… #> 4   45756802 Pathology - Pediatric      Provider  ABMS          Physician Speci… #> 5   45756801 Pathology - Molecular Gen… Provider  ABMS          Physician Speci… #> 6   45756800 Microbiology               Provider  ABMS          Physician Speci… #> # ℹ 5 more variables: standard_concept <chr>, concept_code <chr>, #> #   valid_start_date <date>, valid_end_date <date>, invalid_reason <chr> # count rows per vocab omop_concept() |> dplyr::count(vocabulary_id, sort=TRUE) |> dplyr::collect() #> # A tibble: 69 × 2 #>    vocabulary_id          n #>    <chr>              <int> #>  1 RxNorm Extension 2145325 #>  2 SNOMED           1079403 #>  3 dm+d              405431 #>  4 RxNorm            308709 #>  5 OMOP Genomic      289889 #>  6 LOINC             269552 #>  7 Read              108945 #>  8 ICDO3              64471 #>  9 UK Biobank         19337 #> 10 ICD10              16638 #> # ℹ 59 more rows  oc() |> head() |> dplyr::collect() #> # A tibble: 6 × 10 #>   concept_id concept_name               domain_id vocabulary_id concept_class_id #>        <int> <chr>                      <chr>     <chr>         <chr>            #> 1   45756805 Pediatric Cardiology       Provider  ABMS          Physician Speci… #> 2   45756804 Pediatric Anesthesiology   Provider  ABMS          Physician Speci… #> 3   45756803 Pathology-Anatomic / Path… Provider  ABMS          Physician Speci… #> 4   45756802 Pathology - Pediatric      Provider  ABMS          Physician Speci… #> 5   45756801 Pathology - Molecular Gen… Provider  ABMS          Physician Speci… #> 6   45756800 Microbiology               Provider  ABMS          Physician Speci… #> # ℹ 5 more variables: standard_concept <chr>, concept_code <chr>, #> #   valid_start_date <date>, valid_end_date <date>, invalid_reason <chr>"},{"path":"https://catalamarti.github.io/omopcept/reference/omop_concept_ancestor.html","id":null,"dir":"Reference","previous_headings":"","what":"open a reference to omop concept ancestor file from provided location — omop_concept_ancestor","title":"open a reference to omop concept ancestor file from provided location — omop_concept_ancestor","text":"defaults package cache used omop_vocab_table_save()","code":""},{"path":"https://catalamarti.github.io/omopcept/reference/omop_concept_ancestor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"open a reference to omop concept ancestor file from provided location — omop_concept_ancestor","text":"","code":"omop_concept_ancestor(   location = tools::R_user_dir(\"omopcept\", which = \"cache\") )  oca(location = tools::R_user_dir(\"omopcept\", which = \"cache\"))"},{"path":"https://catalamarti.github.io/omopcept/reference/omop_concept_ancestor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"open a reference to omop concept ancestor file from provided location — omop_concept_ancestor","text":"location url file location, defaults package cache","code":""},{"path":"https://catalamarti.github.io/omopcept/reference/omop_concept_ancestor.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"open a reference to omop concept ancestor file from provided location — omop_concept_ancestor","text":"","code":"# open reference, query and collect data to dataframe omop_concept_ancestor() |> head() |> dplyr::collect() #> # A tibble: 6 × 4 #>   ancestor_concept_id descendant_concept_id min_levels_of_separation #> *               <int>                 <int>                    <int> #> 1              375415               4335743                        4 #> 2              735979              41070383                        3 #> 3              529411              43269406                        3 #> 4              141960                200164                        3 #> 5              438112              42514191                        3 #> 6              434881              36520026                        1 #> # ℹ 1 more variable: max_levels_of_separation <int>  oca() |> head() |> dplyr::collect() #> # A tibble: 6 × 4 #>   ancestor_concept_id descendant_concept_id min_levels_of_separation #> *               <int>                 <int>                    <int> #> 1              375415               4335743                        4 #> 2              735979              41070383                        3 #> 3              529411              43269406                        3 #> 4              141960                200164                        3 #> 5              438112              42514191                        3 #> 6              434881              36520026                        1 #> # ℹ 1 more variable: max_levels_of_separation <int>"},{"path":"https://catalamarti.github.io/omopcept/reference/omop_concept_ancestor_fields.html","id":null,"dir":"Reference","previous_headings":"","what":"field names of omop concept ancestor table — omop_concept_ancestor_fields","title":"field names of omop concept ancestor table — omop_concept_ancestor_fields","text":"field names omop concept ancestor table super short name func giving field names omop concept ancestor table","code":""},{"path":"https://catalamarti.github.io/omopcept/reference/omop_concept_ancestor_fields.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"field names of omop concept ancestor table — omop_concept_ancestor_fields","text":"","code":"omop_concept_ancestor_fields()  ocafields()"},{"path":"https://catalamarti.github.io/omopcept/reference/omop_concept_ancestor_fields.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"field names of omop concept ancestor table — omop_concept_ancestor_fields","text":"","code":"omop_concept_ancestor_fields() #> [1] \"ancestor_concept_id\"      \"descendant_concept_id\"    #> [3] \"min_levels_of_separation\" \"max_levels_of_separation\""},{"path":"https://catalamarti.github.io/omopcept/reference/omop_concept_fields.html","id":null,"dir":"Reference","previous_headings":"","what":"field names of omop concept table — omop_concept_fields","title":"field names of omop concept table — omop_concept_fields","text":"field names omop concept table super short name func giving field names omop concept table","code":""},{"path":"https://catalamarti.github.io/omopcept/reference/omop_concept_fields.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"field names of omop concept table — omop_concept_fields","text":"","code":"omop_concept_fields()  ocfields()"},{"path":"https://catalamarti.github.io/omopcept/reference/omop_concept_fields.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"field names of omop concept table — omop_concept_fields","text":"","code":"omop_concept_fields() #>  [1] \"concept_id\"       \"concept_name\"     \"domain_id\"        \"vocabulary_id\"    #>  [5] \"concept_class_id\" \"standard_concept\" \"concept_code\"     \"valid_start_date\" #>  [9] \"valid_end_date\"   \"invalid_reason\""},{"path":"https://catalamarti.github.io/omopcept/reference/omop_concept_relationship.html","id":null,"dir":"Reference","previous_headings":"","what":"open a reference to omop concept relationship file from provided location — omop_concept_relationship","title":"open a reference to omop concept relationship file from provided location — omop_concept_relationship","text":"defaults package cache used omop_vocab_table_save()","code":""},{"path":"https://catalamarti.github.io/omopcept/reference/omop_concept_relationship.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"open a reference to omop concept relationship file from provided location — omop_concept_relationship","text":"","code":"omop_concept_relationship(   location = tools::R_user_dir(\"omopcept\", which = \"cache\") )  ocr(location = tools::R_user_dir(\"omopcept\", which = \"cache\"))"},{"path":"https://catalamarti.github.io/omopcept/reference/omop_concept_relationship.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"open a reference to omop concept relationship file from provided location — omop_concept_relationship","text":"location url file location, defaults package cache","code":""},{"path":"https://catalamarti.github.io/omopcept/reference/omop_concept_relationship.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"open a reference to omop concept relationship file from provided location — omop_concept_relationship","text":"","code":"# open reference, query and collect data to dataframe omop_concept_relationship() |> head() |> dplyr::collect() #> Warning: downloading a subset of omop vocab files, pre-processed. #> If you want to make sure you have the vocabs you need, download from Athena, save locally & call `omop_vocabs_preprocess()` #> downloading concept_relationship file, may take a few minutes, this only needs to be repeated if the package is re-installed #> # A tibble: 6 × 6 #>   concept_id_1 concept_id_2 relationship_id     valid_start_date valid_end_date #>          <int>        <int> <chr>               <date>           <date>         #> 1      1970397      1970398 Available as box    2022-01-28       2099-12-31     #> 2      1970401      1970304 Available as box    2022-01-28       2099-12-31     #> 3      1970450      1973231 Has quantified form 2022-01-28       2099-12-31     #> 4      1970453      1970454 Constitutes         2022-01-28       2099-12-31     #> 5     42616294     42616296 Subsumes            2016-12-01       2099-12-31     #> 6     42616296     42616294 Is a                2016-12-01       2099-12-31     #> # ℹ 1 more variable: invalid_reason <chr>  ocr() |> head() |> dplyr::collect() #> # A tibble: 6 × 6 #>   concept_id_1 concept_id_2 relationship_id     valid_start_date valid_end_date #>          <int>        <int> <chr>               <date>           <date>         #> 1      1970397      1970398 Available as box    2022-01-28       2099-12-31     #> 2      1970401      1970304 Available as box    2022-01-28       2099-12-31     #> 3      1970450      1973231 Has quantified form 2022-01-28       2099-12-31     #> 4      1970453      1970454 Constitutes         2022-01-28       2099-12-31     #> 5     42616294     42616296 Subsumes            2016-12-01       2099-12-31     #> 6     42616296     42616294 Is a                2016-12-01       2099-12-31     #> # ℹ 1 more variable: invalid_reason <chr>"},{"path":"https://catalamarti.github.io/omopcept/reference/omop_concept_relationship_fields.html","id":null,"dir":"Reference","previous_headings":"","what":"field names of omop concept relationship table — omop_concept_relationship_fields","title":"field names of omop concept relationship table — omop_concept_relationship_fields","text":"field names omop concept relationship table super short name func giving field names omop concept relationship table","code":""},{"path":"https://catalamarti.github.io/omopcept/reference/omop_concept_relationship_fields.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"field names of omop concept relationship table — omop_concept_relationship_fields","text":"","code":"omop_concept_relationship_fields()  ocrfields()"},{"path":"https://catalamarti.github.io/omopcept/reference/omop_concept_relationship_fields.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"field names of omop concept relationship table — omop_concept_relationship_fields","text":"","code":"omop_concept_relationship_fields() #> [1] \"concept_id_1\"     \"concept_id_2\"     \"relationship_id\"  \"valid_start_date\" #> [5] \"valid_end_date\"   \"invalid_reason\""},{"path":"https://catalamarti.github.io/omopcept/reference/omop_descendants.html","id":null,"dir":"Reference","previous_headings":"","what":"find omop concept descendants of one passed — omop_descendants","title":"find omop concept descendants of one passed — omop_descendants","text":"find omop concept descendants one passed super short name func find descendants","code":""},{"path":"https://catalamarti.github.io/omopcept/reference/omop_descendants.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"find omop concept descendants of one passed — omop_descendants","text":"","code":"omop_descendants(   c_id = NULL,   c_ids = NULL,   d_ids = NULL,   v_ids = NULL,   cc_ids = NULL,   standard = NULL,   separation = NULL,   itself = FALSE,   messages = TRUE )  odesc(   c_id = NULL,   c_ids = NULL,   d_ids = NULL,   v_ids = NULL,   cc_ids = NULL,   standard = NULL,   separation = NULL,   itself = FALSE,   messages = TRUE )"},{"path":"https://catalamarti.github.io/omopcept/reference/omop_descendants.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"find omop concept descendants of one passed — omop_descendants","text":"c_id single omop concept_id exact concept_name get descendants , default NULL returns c_ids one concept_id filter , default NULL d_ids one domain_id filter , default NULL v_ids one vocabulary_id filter , default NULL cc_ids one concept_class_id filter , default NULL standard one standard_concept filter , default NULL , S,C separation levels separation filter , default NULL whether include passed concept returned table (min_levels_of_separation==0), default=FALSE messages whether print info messages, default=TRUE","code":""},{"path":"https://catalamarti.github.io/omopcept/reference/omop_descendants.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"find omop concept descendants of one passed — omop_descendants","text":"dataframe concepts attributes","code":""},{"path":"https://catalamarti.github.io/omopcept/reference/omop_descendants.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"find omop concept descendants of one passed — omop_descendants","text":"","code":"omop_descendants(1633308) #> querying concept descendants of: AJCC/UICC Stage 4 - may take a few seconds #> returning 119 concepts #> # A tibble: 119 × 14 #>    ancestor_concept_id ancestor_name     concept_id min_levels_of_separation #>                  <int> <chr>                  <int>                    <int> #>  1             1633308 AJCC/UICC Stage 4    1634451                        3 #>  2             1633308 AJCC/UICC Stage 4    1635450                        2 #>  3             1633308 AJCC/UICC Stage 4    1634487                        3 #>  4             1633308 AJCC/UICC Stage 4    1634688                        1 #>  5             1633308 AJCC/UICC Stage 4    1633523                        3 #>  6             1633308 AJCC/UICC Stage 4    1633985                        3 #>  7             1633308 AJCC/UICC Stage 4    1635246                        3 #>  8             1633308 AJCC/UICC Stage 4    1633786                        4 #>  9             1633308 AJCC/UICC Stage 4    1634447                        1 #> 10             1633308 AJCC/UICC Stage 4    1634005                        3 #> # ℹ 109 more rows #> # ℹ 10 more variables: max_levels_of_separation <int>, concept_name <chr>, #> #   domain_id <chr>, vocabulary_id <chr>, concept_class_id <chr>, #> #   standard_concept <chr>, concept_code <chr>, valid_start_date <date>, #> #   valid_end_date <date>, invalid_reason <chr> #omop_descendants(\"lenalidomide\") #omop_descendants(\"Non-invasive blood pressure\") #omop_descendants(\"Non-invasive blood pressure\",separation=c(1,2)) #chemodrugs <- omop_descendants(\"Cytotoxic chemotherapeutic\",v_ids=\"HemOnc\",d_ids=\"Regimen\") #no filtering by descendants #(expect to be same as omop_ancestors()) #v slight difference 19409 v 19411 concepts, not sure why, prob not important #cmde <- omop_descendants(v_ids=\"Cancer Modifier\") #cmde1 <- omop_descendants(v_ids=\"Cancer Modifier\", separation=1) # because of R argument matching, you can just use the first unique letters of # arguments e.g. v for v_ids, cc for cc_ids chemodrugs <- odesc(\"Cytotoxic chemotherapeutic\", v=\"HemOnc\", d=\"Regimen\") #> querying concept descendants of: Cytotoxic chemotherapeutic - may take a few seconds #> returning 357 concepts"},{"path":"https://catalamarti.github.io/omopcept/reference/omop_domain.html","id":null,"dir":"Reference","previous_headings":"","what":"return domain_id s for concept_id s — omop_domain","title":"return domain_id s for concept_id s — omop_domain","text":"return domain_id s concept_id s","code":""},{"path":"https://catalamarti.github.io/omopcept/reference/omop_domain.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"return domain_id s for concept_id s — omop_domain","text":"","code":"omop_domain(c_id)"},{"path":"https://catalamarti.github.io/omopcept/reference/omop_domain.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"return domain_id s for concept_id s — omop_domain","text":"c_id concept_id s get domain_id s ","code":""},{"path":"https://catalamarti.github.io/omopcept/reference/omop_domain.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"return domain_id s for concept_id s — omop_domain","text":"","code":"omop_domain(c(196523,43807321)) #> # A tibble: 2 × 2 #>   concept_id domain_id #>        <int> <chr>     #> 1     196523 Condition #> 2   43807321 Drug      #can specify as an integer or not"},{"path":"https://catalamarti.github.io/omopcept/reference/omop_drug_lookup_create.html","id":null,"dir":"Reference","previous_headings":"","what":"create a lookup table from drug concepts in vocabs RxNorm and/or RxNorm Extension to ATC drug classes — omop_drug_lookup_create","title":"create a lookup table from drug concepts in vocabs RxNorm and/or RxNorm Extension to ATC drug classes — omop_drug_lookup_create","text":"EXPERIMENTAL either drug concepts filtered concept_class_id drug concepts passed table (e.g. drug_exposure) ATC drug classification incorporated within RxNorm. Anatomical Therapeutic Chemical Classification System.","code":""},{"path":"https://catalamarti.github.io/omopcept/reference/omop_drug_lookup_create.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"create a lookup table from drug concepts in vocabs RxNorm and/or RxNorm Extension to ATC drug classes — omop_drug_lookup_create","text":"","code":"omop_drug_lookup_create(   df = NULL,   name_drug_concept_id = \"drug_concept_id\",   concept_class_ids = c(\"Ingredient\"),   drug_concept_vocabs = c(\"RxNorm\", \"RxNorm Extension\"),   outfile = NULL,   messages = TRUE )"},{"path":"https://catalamarti.github.io/omopcept/reference/omop_drug_lookup_create.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"create a lookup table from drug concepts in vocabs RxNorm and/or RxNorm Extension to ATC drug classes — omop_drug_lookup_create","text":"df optional table containing drug concept ids name_drug_concept_id optional name column containing drug concept ids, default=\"drug_concept_id\" concept_class_ids optional filter concept_class_ids, multiple allowed, default = \"Ingredient\", ignored table passed df drug_concept_vocabs vocabs containing drug concepts default = c(\"RxNorm\",\"RxNorm Extension\") option just = \"RxNorm Extension\" outfile name output file default=NULL file messages whether print info messages, default=TRUE","code":""},{"path":"https://catalamarti.github.io/omopcept/reference/omop_drug_lookup_create.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"create a lookup table from drug concepts in vocabs RxNorm and/or RxNorm Extension to ATC drug classes — omop_drug_lookup_create","text":"data frame drug concepts ATC classes","code":""},{"path":"https://catalamarti.github.io/omopcept/reference/omop_drug_lookup_create.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"create a lookup table from drug concepts in vocabs RxNorm and/or RxNorm Extension to ATC drug classes — omop_drug_lookup_create","text":"","code":"#to create a lookup table for all Ingredients drug_lookup = omop_drug_lookup_create() #> creating drug lookup may take more than a few seconds (e.g. ~20s for all concept_class_ids == 'Ingredient' #counting numbers of concepts under each level in ATC hierarchy"},{"path":"https://catalamarti.github.io/omopcept/reference/omop_filter_concepts.html","id":null,"dir":"Reference","previous_headings":"","what":"filter omop concepts by standard attributes — omop_filter_concepts","title":"filter omop concepts by standard attributes — omop_filter_concepts","text":"Works dataframe arrow object. Can filter one : concept_id, domain_id, vocabulary_id, concept_class_id, standard_concept used functions","code":""},{"path":"https://catalamarti.github.io/omopcept/reference/omop_filter_concepts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"filter omop concepts by standard attributes — omop_filter_concepts","text":"","code":"omop_filter_concepts(   df,   c_ids = NULL,   d_ids = NULL,   v_ids = NULL,   cc_ids = NULL,   standard = NULL )"},{"path":"https://catalamarti.github.io/omopcept/reference/omop_filter_concepts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"filter omop concepts by standard attributes — omop_filter_concepts","text":"df dataframe standard omop concept table columns c_ids one concept_id filter , default NULL d_ids one domain_id filter , default NULL v_ids one vocabulary_id filter , default NULL cc_ids one concept_class_id filter , default NULL standard one standard_concept filter , default NULL , S,C","code":""},{"path":"https://catalamarti.github.io/omopcept/reference/omop_filter_concepts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"filter omop concepts by standard attributes — omop_filter_concepts","text":"filtered dataframe concepts attributes","code":""},{"path":"https://catalamarti.github.io/omopcept/reference/omop_filter_concepts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"filter omop concepts by standard attributes — omop_filter_concepts","text":"","code":"omop_concept() |>   omop_filter_concepts(d_ids=c(\"measurement\",\"drug\"),v_ids=\"SNOMED\") |>   dplyr::collect() |>   dplyr::count(domain_id,vocabulary_id) #> # A tibble: 2 × 3 #>   domain_id   vocabulary_id      n #>   <chr>       <chr>          <int> #> 1 Drug        SNOMED        254167 #> 2 Measurement SNOMED         39066 omop_concept() |> omop_filter_concepts(v_ids=\"Gender\") |> dplyr::collect() #> # A tibble: 5 × 10 #>   concept_id concept_name domain_id vocabulary_id concept_class_id #>        <int> <chr>        <chr>     <chr>         <chr>            #> 1       8570 AMBIGUOUS    Gender    Gender        Gender           #> 2       8532 FEMALE       Gender    Gender        Gender           #> 3       8507 MALE         Gender    Gender        Gender           #> 4       8521 OTHER        Gender    Gender        Gender           #> 5       8551 UNKNOWN      Gender    Gender        Gender           #> # ℹ 5 more variables: standard_concept <chr>, concept_code <chr>, #> #   valid_start_date <date>, valid_end_date <date>, invalid_reason <chr>"},{"path":"https://catalamarti.github.io/omopcept/reference/omop_graph.html","id":null,"dir":"Reference","previous_headings":"","what":"graph omop hierarchy accepts output from either omop_ancestors(), omop_descendants() or omop_relations — omop_graph","title":"graph omop hierarchy accepts output from either omop_ancestors(), omop_descendants() or omop_relations — omop_graph","text":"graph omop hierarchy accepts output either omop_ancestors(), omop_descendants() omop_relations super short name graph func","code":""},{"path":"https://catalamarti.github.io/omopcept/reference/omop_graph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"graph omop hierarchy accepts output from either omop_ancestors(), omop_descendants() or omop_relations — omop_graph","text":"","code":"omop_graph(   dfin,   ggrlayout = \"graphopt\",   palettebrewer = \"Dark2\",   palettedirection = 1,   edgecolour = \"grey71\",   nodecolourvar = \"domain_id\",   textcolourvar = NULL,   nodealpha = 0.8,   edgealpha = 0.3,   edgewidth = 0.1,   nodesizevar = \"connections\",   nodesize = c(0, 6),   nodetxtvar = \"name\",   nodetxtangle = 0,   nodetxtsize = 9,   nodetxtnudgey = 0.3,   nodetxtnudgex = 0,   legendtxtsize = 18,   titletxtsize = 18,   titlejust = \"centre\",   legendshow = TRUE,   legendpos = \"bottom\",   legenddir = \"horizontal\",   legendcm = 3,   plot = TRUE,   saveplot = TRUE,   filetype = \"pdf\",   filenameroot = \"omop_graph\",   filenamecustom = NULL,   filepath = file.path(\"..//omopcept-plots\"),   canvas = NULL,   width = 50,   height = 30,   units = \"cm\",   titlecolour = \"darkred\",   backcolour = \"white\",   graphtitle = \"omopcept graph\",   graphsubtitle = NULL,   caption = NULL,   captiontxtsize = 18,   captionjust = \"left\",   captioncolour = \"black\",   messages = TRUE )  omgr(   dfin,   ggrlayout = \"graphopt\",   palettebrewer = \"Dark2\",   palettedirection = 1,   edgecolour = \"grey71\",   nodecolourvar = \"domain_id\",   textcolourvar = NULL,   nodealpha = 0.8,   edgealpha = 0.3,   edgewidth = 0.1,   nodesizevar = \"connections\",   nodesize = c(0, 6),   nodetxtvar = \"name\",   nodetxtangle = 0,   nodetxtsize = 9,   nodetxtnudgey = 0.3,   nodetxtnudgex = 0,   legendtxtsize = 18,   titletxtsize = 18,   titlejust = \"centre\",   legendshow = TRUE,   legendpos = \"bottom\",   legenddir = \"horizontal\",   legendcm = 3,   plot = TRUE,   saveplot = TRUE,   filetype = \"pdf\",   filenameroot = \"omop_graph\",   filenamecustom = NULL,   filepath = file.path(\"..//omopcept-plots\"),   canvas = NULL,   width = 50,   height = 30,   units = \"cm\",   titlecolour = \"darkred\",   backcolour = \"white\",   graphtitle = \"omopcept graph\",   graphsubtitle = NULL,   caption = NULL,   captiontxtsize = 18,   captionjust = \"left\",   captioncolour = \"black\",   messages = TRUE )"},{"path":"https://catalamarti.github.io/omopcept/reference/omop_graph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"graph omop hierarchy accepts output from either omop_ancestors(), omop_descendants() or omop_relations — omop_graph","text":"dfin dataframe output either omop_ancestors(), omop_descendants() omop_relations ggrlayout ggraph layout, default = \"graphopt\", also \"tree\" works well, directional palettebrewer colour brewer palette, default='Dark2', options e.g. 'Set1' see RColorBrewer::brewer.pal.info palettedirection palette direction, default=1, -1 reversed edgecolour colour lines joining nodes nodecolourvar column specify node colour, default=\"domain_id\" options \"vocabulary_id\" \"concept_class_id\" \"standard_concept\" textcolourvar column specify node text colour, default=NULL set node_colour . options \"vocabulary_id\" \"concept_class_id\" \"standard_concept\" nodealpha node transparency, default 0.8 edgealpha edge transparency, default 0.3, #ggraph uses underscore edge_alpha mess consistency edgewidth edge width, default 0.1, #ggraph uses underscore edge_width mess consistency nodesizevar column set node size, default=\"connections\", uses num connections node nodesize modify node size range, default c(0,6), modify size whether nodesizevar used , single value e.g. 5 give equal sized nodes nodetxtvar column set node label, default=\"name\" nodetxtangle node text angle, default=0, 90 gives vertical text nodetxtsize node text size, default=9 nodetxtnudgey nudge_y text relative points, default 0.3 nodetxtnudgex nudge_x text relative points, default 0 legendtxtsize text size legend, default=20 titletxtsize text size title, default=20 titlejust title justification, \"left\",\"right\", default \"centre\" legendshow whether show legend, default TRUE legendpos legend position, default 'bottom' legenddir legen direction default = 'horizontal' legendcm legend size cm, default=3 plot whether display plot, default TRUE, note large plots display well R graphics window output well pdf saveplot whether save plot, default TRUE, note large plots display well R graphics window output well pdf filetype output image file, default='pdf' filenameroot optional root auto filename plot (used filenamecustom supplied) filenamecustom optional filename plot, otherwise default name created filepath save image file, default=file.path(\"..//omopcept-plots\") canvas plot setups override width,height,units \"A4\" \"A4landscape\" etc. width plot width, default=50 height plot height, default=30 units plot size units default='cm' titlecolour colour main title, default='darkred' backcolour colour background graphtitle optional title graph, default NULL none graphsubtitle optional subtitle graph, default NULL none caption optional text plot, default=NULL captiontxtsize caption text size default=18, captionjust caption justification default=\"left\", captioncolour caption text colour default=\"black\", messages whether print info messages, default=TRUE","code":""},{"path":"https://catalamarti.github.io/omopcept/reference/omop_graph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"graph omop hierarchy accepts output from either omop_ancestors(), omop_descendants() or omop_relations — omop_graph","text":"ggraph object","code":""},{"path":"https://catalamarti.github.io/omopcept/reference/omop_graph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"graph omop hierarchy accepts output from either omop_ancestors(), omop_descendants() or omop_relations — omop_graph","text":"","code":"bp <- omop_relations(\"Non-invasive blood pressure\") #> recursively querying concept relations of: Non-invasive blood pressure - may take more than a few seconds #> step 1 of 1 #>    querying concept relations of: Non-invasive blood pressure - may take a few seconds #> returning 8 concepts omop_graph(bp, nodesizevar=\"connections\", nodesize = 5) #> plot dims: w 50  h 30  u: cm  #> saved graph file as omop_graph-graphopt-p1Dark2-legbottom3-nts9-nta0-ndomain_id-bwhite-egrey71-50x30cm.pdf  omop_graph(bp, nodesizevar=\"\", nodesize = 5) #> plot dims: w 50  h 30  u: cm  #> saved graph file as omop_graph-graphopt-p1Dark2-legbottom3-nts9-nta0-ndomain_id-bwhite-egrey71-50x30cm.pdf   #TODO need a more flexible palette solution than brewer (that limits num cats)"},{"path":"https://catalamarti.github.io/omopcept/reference/omop_graph_calc.html","id":null,"dir":"Reference","previous_headings":"","what":"calculate nodes and edges from omop hierarchy accepts output from either omop_ancestors(), omop_descendants() or omop_relations used by omop_graph(), you are only likely to want to use on it's own to a) separate calculation & visualisation so that you can join attributes for visualisation b) pass the nodes and edges to a different graph rendering package — omop_graph_calc","title":"calculate nodes and edges from omop hierarchy accepts output from either omop_ancestors(), omop_descendants() or omop_relations used by omop_graph(), you are only likely to want to use on it's own to a) separate calculation & visualisation so that you can join attributes for visualisation b) pass the nodes and edges to a different graph rendering package — omop_graph_calc","text":"calculate nodes edges omop hierarchy accepts output either omop_ancestors(), omop_descendants() omop_relations used omop_graph(), likely want use ) separate calculation & visualisation can join attributes visualisation b) pass nodes edges different graph rendering package","code":""},{"path":"https://catalamarti.github.io/omopcept/reference/omop_graph_calc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"calculate nodes and edges from omop hierarchy accepts output from either omop_ancestors(), omop_descendants() or omop_relations used by omop_graph(), you are only likely to want to use on it's own to a) separate calculation & visualisation so that you can join attributes for visualisation b) pass the nodes and edges to a different graph rendering package — omop_graph_calc","text":"","code":"omop_graph_calc(dfin)"},{"path":"https://catalamarti.github.io/omopcept/reference/omop_graph_calc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"calculate nodes and edges from omop hierarchy accepts output from either omop_ancestors(), omop_descendants() or omop_relations used by omop_graph(), you are only likely to want to use on it's own to a) separate calculation & visualisation so that you can join attributes for visualisation b) pass the nodes and edges to a different graph rendering package — omop_graph_calc","text":"dfin dataframe output either omop_ancestors(), omop_descendants() omop_relations","code":""},{"path":"https://catalamarti.github.io/omopcept/reference/omop_graph_calc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"calculate nodes and edges from omop hierarchy accepts output from either omop_ancestors(), omop_descendants() or omop_relations used by omop_graph(), you are only likely to want to use on it's own to a) separate calculation & visualisation so that you can join attributes for visualisation b) pass the nodes and edges to a different graph rendering package — omop_graph_calc","text":"list containing edges & nodes tables","code":""},{"path":"https://catalamarti.github.io/omopcept/reference/omop_graph_calc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"calculate nodes and edges from omop hierarchy accepts output from either omop_ancestors(), omop_descendants() or omop_relations used by omop_graph(), you are only likely to want to use on it's own to a) separate calculation & visualisation so that you can join attributes for visualisation b) pass the nodes and edges to a different graph rendering package — omop_graph_calc","text":"","code":"bp <- omop_relations(\"Non-invasive blood pressure\") #> recursively querying concept relations of: Non-invasive blood pressure - may take more than a few seconds #> step 1 of 1 #>    querying concept relations of: Non-invasive blood pressure - may take a few seconds #> returning 8 concepts listedges_nodes <- omop_graph_calc(bp)"},{"path":"https://catalamarti.github.io/omopcept/reference/omop_graph_vis.html","id":null,"dir":"Reference","previous_headings":"","what":"visualise graph of omop hierarchy called by omop_graph() — omop_graph_vis","title":"visualise graph of omop hierarchy called by omop_graph() — omop_graph_vis","text":"visualise graph omop hierarchy called omop_graph()","code":""},{"path":"https://catalamarti.github.io/omopcept/reference/omop_graph_vis.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"visualise graph of omop hierarchy called by omop_graph() — omop_graph_vis","text":"","code":"omop_graph_vis(   graphlist,   ggrlayout = \"graphopt\",   palettebrewer = \"Dark2\",   palettedirection = 1,   edgecolour = \"grey71\",   nodecolourvar = \"domain_id\",   textcolourvar = NULL,   nodealpha = 0.8,   edgealpha = 0.3,   edgewidth = 0.1,   nodesizevar = \"connections\",   nodesize = c(0, 6),   nodetxtvar = \"name\",   nodetxtangle = 0,   nodetxtsize = 9,   nodetxtnudgey = 0.3,   nodetxtnudgex = 0,   legendtxtsize = 18,   titletxtsize = 18,   titlejust = \"centre\",   legendshow = TRUE,   legendpos = \"bottom\",   legenddir = \"horizontal\",   legendcm = 3,   plot = TRUE,   saveplot = TRUE,   filetype = \"pdf\",   filenameroot = \"omop_graph\",   filenamecustom = NULL,   filepath = file.path(\"..//omopcept-plots\"),   canvas = NULL,   width = 50,   height = 30,   units = \"cm\",   titlecolour = \"darkred\",   backcolour = \"white\",   graphtitle = \"omopcept graph\",   graphsubtitle = NULL,   caption = NULL,   captiontxtsize = 18,   captionjust = \"left\",   captioncolour = \"black\",   messages = TRUE )"},{"path":"https://catalamarti.github.io/omopcept/reference/omop_graph_vis.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"visualise graph of omop hierarchy called by omop_graph() — omop_graph_vis","text":"graphlist list edges nodes created omop_graph_calc() ggrlayout ggraph layout, default = \"graphopt\", also \"tree\" works well, directional palettebrewer colour brewer palette, default='Dark2', options e.g. 'Set1' see RColorBrewer::brewer.pal.info palettedirection palette direction, default=1, -1 reversed edgecolour colour lines joining nodes nodecolourvar column specify node colour, default=\"domain_id\" options \"vocabulary_id\" \"concept_class_id\" \"standard_concept\" textcolourvar column specify node text colour, default=NULL set node_colour . options \"vocabulary_id\" \"concept_class_id\" \"standard_concept\" nodealpha node transparency, default 0.8 edgealpha edge transparency, default 0.3, #ggraph uses underscore edge_alpha mess consistency edgewidth edge width, default 0.1, #ggraph uses underscore edge_width mess consistency nodesizevar column set node size, default=\"connections\", uses num connections node nodesize modify node size range, default c(0,6), modify size whether nodesizevar used nodetxtvar column set node label, default=\"name\" nodetxtangle node text angle, default=0, 90 gives vertical text nodetxtsize node text size, default=9 nodetxtnudgey nudge_y text relative points, default 0.3 nodetxtnudgex nudge_x text relative points, default 0 legendtxtsize text size legend, default=20 titletxtsize text size title, default=20 titlejust title justification, \"left\",\"right\", default \"centre\" legendshow whether show legend, default TRUE legendpos legend position, default 'bottom' legenddir legen direction default = 'horizontal' legendcm legend size cm, default=3 plot whether display plot, default TRUE, note large plots display well R graphics window output well pdf saveplot whether save plot, default TRUE, note large plots display well R graphics window output well pdf filetype output image file, default='pdf' filenameroot optional root auto filename plot (used filenamecustom supplied) filenamecustom optional filename plot, otherwise default name created filepath save image file, default=file.path(\"..//omopcept-plots\") canvas plot setups override width,height,units \"A4\" \"A4landscape\" etc. width plot width, default=50 height plot height, default=30 units plot size units default='cm' titlecolour colour main title, default='darkred' backcolour colour background graphtitle optional title graph, default NULL none graphsubtitle optional subtitle graph, default NULL none caption optional text plot, default=NULL captiontxtsize caption text size default=18, captionjust caption justification default=\"left\", captioncolour caption text colour default=\"black\", messages whether print info messages, default=TRUE","code":""},{"path":"https://catalamarti.github.io/omopcept/reference/omop_graph_vis.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"visualise graph of omop hierarchy called by omop_graph() — omop_graph_vis","text":"ggraph object","code":""},{"path":"https://catalamarti.github.io/omopcept/reference/omop_graph_vis.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"visualise graph of omop hierarchy called by omop_graph() — omop_graph_vis","text":"","code":"#showing how nodesizevar can be set from any column bp <- omop_relations(\"Non-invasive blood pressure\") #> recursively querying concept relations of: Non-invasive blood pressure - may take more than a few seconds #> step 1 of 1 #>    querying concept relations of: Non-invasive blood pressure - may take a few seconds #> returning 8 concepts nodesedges <- omop_graph_calc(bp) nodesedges$nodes$testsizevar <- c(1:nrow(nodesedges$nodes)) omop_graph_vis(nodesedges, nodesizevar=\"testsizevar\", nodesize = 5) #> plot dims: w 50  h 30  u: cm  #> saved graph file as omop_graph-graphopt-p1Dark2-legbottom3-nts9-nta0-ndomain_id-bwhite-egrey71-50x30cm.pdf"},{"path":"https://catalamarti.github.io/omopcept/reference/omop_id.html","id":null,"dir":"Reference","previous_headings":"","what":"query concept records by concept_id from omop concepts table — omop_id","title":"query concept records by concept_id from omop concepts table — omop_id","text":"query concept records concept_id omop concepts table super short name func get info concept_id","code":""},{"path":"https://catalamarti.github.io/omopcept/reference/omop_id.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"query concept records by concept_id from omop concepts table — omop_id","text":"","code":"omop_id(c_id, columns = \"all\")  oid(c_id, columns = \"all\")"},{"path":"https://catalamarti.github.io/omopcept/reference/omop_id.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"query concept records by concept_id from omop concepts table — omop_id","text":"c_id concept_id s get records columns columns omop concept table return. default \"\", options c(\"concept_name\") & c(\"concept_name\",\"domain_id\")","code":""},{"path":"https://catalamarti.github.io/omopcept/reference/omop_id.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"query concept records by concept_id from omop concepts table — omop_id","text":"","code":"omop_id(196523) #> # A tibble: 1 × 10 #>   concept_id concept_name domain_id vocabulary_id concept_class_id #>        <int> <chr>        <chr>     <chr>         <chr>            #> 1     196523 Diarrhea     Condition SNOMED        Clinical Finding #> # ℹ 5 more variables: standard_concept <chr>, concept_code <chr>, #> #   valid_start_date <date>, valid_end_date <date>, invalid_reason <chr> #can specify as an integer or not omop_id(196523L) #> # A tibble: 1 × 10 #>   concept_id concept_name domain_id vocabulary_id concept_class_id #>        <int> <chr>        <chr>     <chr>         <chr>            #> 1     196523 Diarrhea     Condition SNOMED        Clinical Finding #> # ℹ 5 more variables: standard_concept <chr>, concept_code <chr>, #> #   valid_start_date <date>, valid_end_date <date>, invalid_reason <chr>  oid(43807321L) #> # A tibble: 1 × 10 #>   concept_id concept_name               domain_id vocabulary_id concept_class_id #>        <int> <chr>                      <chr>     <chr>         <chr>            #> 1   43807321 5 ML Epirubicin 2 MG/ML I… Drug      RxNorm Exten… Quant Clinical … #> # ℹ 5 more variables: standard_concept <chr>, concept_code <chr>, #> #   valid_start_date <date>, valid_end_date <date>, invalid_reason <chr>"},{"path":"https://catalamarti.github.io/omopcept/reference/omop_join_name.html","id":null,"dir":"Reference","previous_headings":"","what":"join omop concept name and other concept columns onto a dataframe with a *_concept_id column — omop_join_name","title":"join omop concept name and other concept columns onto a dataframe with a *_concept_id column — omop_join_name","text":"adds (namestart)_name based (namestart)_concept_id e.g. drug_concept_id get drug_name","code":""},{"path":"https://catalamarti.github.io/omopcept/reference/omop_join_name.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"join omop concept name and other concept columns onto a dataframe with a *_concept_id column — omop_join_name","text":"","code":"omop_join_name(df, namestart = \"\", namefull = \"\", columns = c(\"concept_name\"))  ojoin(df, namestart = \"\", namefull = \"\", columns = c(\"concept_name\"))"},{"path":"https://catalamarti.github.io/omopcept/reference/omop_join_name.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"join omop concept name and other concept columns onto a dataframe with a *_concept_id column — omop_join_name","text":"df dataframe namestart start *_concept_id column, \"\" join concept_name, ignored namefull used namefull optional full name concept_id column, default \"\" namestart used columns columns omop concept table join . Option \"\", default=c(\"concept_name\"), e.g. c(\"concept_name\",\"domain_id\")","code":""},{"path":"https://catalamarti.github.io/omopcept/reference/omop_join_name.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"join omop concept name and other concept columns onto a dataframe with a *_concept_id column — omop_join_name","text":"","code":"data.frame(concept_id=(c(3571338L,4002075L))) |> omop_join_name() #> # A tibble: 2 × 2 #>   concept_id concept_name      #>        <int> <chr>             #> 1    3571338 Problem behaviour #> 2    4002075 BLUE LOTION       data.frame(drug_concept_id=(c(4000794L,4002592L))) |> omop_join_name(namestart=\"drug\") #> # A tibble: 2 × 2 #>   drug_concept_id drug_concept_name       #>             <int> <chr>                   #> 1         4000794 BUZZ OFF                #> 2         4002592 DEXAMETHASONE INJECTION #if drug_exposure loaded: #df2 <- drug_exposure |> distinct(route_concept_id) |> omop_join_name(namestart=\"route\") #df3 <- omop_concept_relationship() |> head() |> #       dplyr::collect() |> omop_join_name(namefull=\"concept_id_1\") #copes with different formatted columns e.g. if al NAs #TODO add this as a test #data.frame(bad_concept_id=(c(NA,NA)),concept_id=(c(3571338L,4002075L))) |> omop_join_name_all() data.frame(drug_concept_id=(c(4000794L,4002592L))) |> ojoin(namestart=\"drug\") #> # A tibble: 2 × 2 #>   drug_concept_id drug_concept_name       #>             <int> <chr>                   #> 1         4000794 BUZZ OFF                #> 2         4002592 DEXAMETHASONE INJECTION"},{"path":"https://catalamarti.github.io/omopcept/reference/omop_join_name_all.html","id":null,"dir":"Reference","previous_headings":"","what":"join omop concept names onto all *_concept_id columns in a dataframe — omop_join_name_all","title":"join omop concept names onto all *_concept_id columns in a dataframe — omop_join_name_all","text":"adds \\_name based \\_concept_id e.g. drug_concept_id get drug_name etc.","code":""},{"path":"https://catalamarti.github.io/omopcept/reference/omop_join_name_all.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"join omop concept names onto all *_concept_id columns in a dataframe — omop_join_name_all","text":"","code":"omop_join_name_all(df, columns = c(\"concept_name\"))  ojoinall(df, columns = c(\"concept_name\"))"},{"path":"https://catalamarti.github.io/omopcept/reference/omop_join_name_all.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"join omop concept names onto all *_concept_id columns in a dataframe — omop_join_name_all","text":"df dataframe, list multiple dataframes columns columns omop concept table join . Option \"\", default=c(\"concept_name\"), e.g. c(\"concept_name\",\"domain_id\")","code":""},{"path":"https://catalamarti.github.io/omopcept/reference/omop_join_name_all.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"join omop concept names onto all *_concept_id columns in a dataframe — omop_join_name_all","text":"dataframe based input df 1 extra column added concept_id column, list multiple dataframes","code":""},{"path":"https://catalamarti.github.io/omopcept/reference/omop_join_name_all.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"join omop concept names onto all *_concept_id columns in a dataframe — omop_join_name_all","text":"","code":"data.frame(concept_id=(c(3571338L,3655355L)),            drug_concept_id=(c(4000794L,35628998L))) |>            omop_join_name_all() #> # A tibble: 2 × 4 #>   concept_id concept_name         drug_concept_id drug_concept_name              #>        <int> <chr>                          <int> <chr>                          #> 1    3571338 Problem behaviour            4000794 BUZZ OFF                       #> 2    3655355 Erectile dysfunction        35628998 Retired SNOMED UK Drug extens… data.frame(domain_concept_id_1=(c(3571338L,3655355L))) |> omop_join_name_all() #> # A tibble: 2 × 2 #>   domain_concept_id_1 domain_concept_name_1 #>                 <int> <chr>                 #> 1             3571338 Problem behaviour     #> 2             3655355 Erectile dysfunction  #examples commented for now mostly to speed package build #data.frame(route_concept_id=(c(4132161L,  4171047L)), #          drug_concept_id=(c(1550560L,  35780880L))) |> #          omop_join_name_all() #df2 <- drug_exposure |> #       head(100)) |> #       omop_join_name_all() #df3 <- omop_concept_relationship() |> head() |> #          dplyr::collect() |> omop_join_name_all() # multiple tables in a list #df4 <- data.frame(concept_id=(c(3571338L,3655355L))) #list1 <- list(df4,df4) #list2 <- list1 |> omop_join_name_all(columns=\"all\") data.frame(concept_id=(c(3571338L,3655355L)),            drug_concept_id=(c(4000794L,35628998L))) |>            ojoinall() #> # A tibble: 2 × 4 #>   concept_id concept_name         drug_concept_id drug_concept_name              #>        <int> <chr>                          <int> <chr>                          #> 1    3571338 Problem behaviour            4000794 BUZZ OFF                       #> 2    3655355 Erectile dysfunction        35628998 Retired SNOMED UK Drug extens…"},{"path":"https://catalamarti.github.io/omopcept/reference/omop_names.html","id":null,"dir":"Reference","previous_headings":"","what":"string search of concept_name in omop concepts table — omop_names","title":"string search of concept_name in omop concepts table — omop_names","text":"string search concept_name omop concepts table super short name func search concepts concept_name","code":""},{"path":"https://catalamarti.github.io/omopcept/reference/omop_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"string search of concept_name in omop concepts table — omop_names","text":"","code":"omop_names(   findstring,   ignore_case = TRUE,   exact = FALSE,   fixed = FALSE,   c_ids = NULL,   d_ids = NULL,   v_ids = NULL,   cc_ids = NULL,   standard = NULL,   messages = TRUE )  onames(   findstring,   ignore_case = TRUE,   exact = FALSE,   fixed = FALSE,   c_ids = NULL,   d_ids = NULL,   v_ids = NULL,   cc_ids = NULL,   standard = NULL,   messages = TRUE )"},{"path":"https://catalamarti.github.io/omopcept/reference/omop_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"string search of concept_name in omop concepts table — omop_names","text":"findstring search regex, e.g. \"^\" find starting ignore_case ignore case string comparison, default TRUE exact TRUE exact string search, \"start\" exact start, \"end\" exact end, default=FALSE str_detect fixed default FALSE allows regex,TRUE uses grepl exact matching c_ids one concept_id filter , default NULL d_ids one domain_id filter , default NULL v_ids one vocabulary_id filter , default NULL cc_ids one concept_class_id filter , default NULL standard one standard_concept filter , default NULL , S,C messages whether print info messages, default=TRUE","code":""},{"path":"https://catalamarti.github.io/omopcept/reference/omop_names.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"string search of concept_name in omop concepts table — omop_names","text":"","code":"omop_names(\"AJCC/UICC Stage\") #> returning 36 concepts #> # A tibble: 36 × 10 #>    concept_id concept_name        domain_id   vocabulary_id   concept_class_id #>         <int> <chr>               <chr>       <chr>           <chr>            #>  1    1633754 AJCC/UICC Stage 0   Measurement Cancer Modifier Staging/Grading  #>  2    1635410 AJCC/UICC Stage 0a  Measurement Cancer Modifier Staging/Grading  #>  3    1634049 AJCC/UICC Stage 0is Measurement Cancer Modifier Staging/Grading  #>  4    1633306 AJCC/UICC Stage 1   Measurement Cancer Modifier Staging/Grading  #>  5    1635790 AJCC/UICC Stage 1A  Measurement Cancer Modifier Staging/Grading  #>  6    1633565 AJCC/UICC Stage 1A1 Measurement Cancer Modifier Staging/Grading  #>  7    1635611 AJCC/UICC Stage 1A2 Measurement Cancer Modifier Staging/Grading  #>  8    1634353 AJCC/UICC Stage 1A3 Measurement Cancer Modifier Staging/Grading  #>  9    1634494 AJCC/UICC Stage 1B  Measurement Cancer Modifier Staging/Grading  #> 10    1634019 AJCC/UICC Stage 1B1 Measurement Cancer Modifier Staging/Grading  #> # ℹ 26 more rows #> # ℹ 5 more variables: standard_concept <chr>, concept_code <chr>, #> #   valid_start_date <date>, valid_end_date <date>, invalid_reason <chr> #omop_names(\"chemotherapy\", v_ids=\"LOINC\") #omop_names(\"chemotherapy\", v_ids=c(\"LOINC\",\"SNOMED\"), d_ids=c(\"Observation\",\"Procedure\")) #set the findstring to \"\" to get all rows satisfying the other conditions #omop_names(\"\", v_ids=\"Gender\") #omop_names(\"\", d_ids=\"Type Concept\", standard=\"S\") #exact= options #t1 <- onames(\"tobacco\") #returning 616 concepts #t2 <- onames(\"tobacco\",exact=TRUE) #returning 2 concepts #t3 <- onames(\"tobacco\",exact=\"start\") #returning 229 concepts #t4 <- onames(\"tobacco\",exact=\"end\") #returning 54 concepts # onames(\"chemotherapy\", v_ids=\"LOINC\") # because of R argument matching, you can just use the first unique letters of # arguments e.g. v for v_ids, cc for cc_ids # to get all clinical drugs starting with A onames(\"^a\", d=\"DRUG\", v=\"SNOMED\", cc=\"Clinical Drug\") #> returning 1168 concepts #> # A tibble: 1,168 × 10 #>    concept_id concept_name              domain_id vocabulary_id concept_class_id #>         <int> <chr>                     <chr>     <chr>         <chr>            #>  1   37151230 Azithromycin 20 mg/mL or… Drug      SNOMED        Clinical Drug    #>  2   37151437 Alprazolam 1 mg prolonge… Drug      SNOMED        Clinical Drug    #>  3   37151438 Alprazolam 500 microgram… Drug      SNOMED        Clinical Drug    #>  4   37151439 Alprazolam 250 microgram… Drug      SNOMED        Clinical Drug    #>  5   37151466 Aztreonam (as aztreonam … Drug      SNOMED        Clinical Drug    #>  6   37151561 Amitriptyline (as amitri… Drug      SNOMED        Clinical Drug    #>  7   37151626 Ampicillin (as ampicilli… Drug      SNOMED        Clinical Drug    #>  8   37151790 Acyclovir 50 mg/g and hy… Drug      SNOMED        Clinical Drug    #>  9   37151862 Azithromycin 10 mg/mL ey… Drug      SNOMED        Clinical Drug    #> 10   37151871 Ampicillin (as ampicilli… Drug      SNOMED        Clinical Drug    #> # ℹ 1,158 more rows #> # ℹ 5 more variables: standard_concept <chr>, concept_code <chr>, #> #   valid_start_date <date>, valid_end_date <date>, invalid_reason <chr> # to get all 'chop' cancer regimens #chops <- onames(\"chop\", d=\"Regimen\")"},{"path":"https://catalamarti.github.io/omopcept/reference/omop_relations.html","id":null,"dir":"Reference","previous_headings":"","what":"recursively extract omop concept relations of one passed - immediate relations with indication of relationship — omop_relations","title":"recursively extract omop concept relations of one passed - immediate relations with indication of relationship — omop_relations","text":"TODO need sort repeated rows","code":""},{"path":"https://catalamarti.github.io/omopcept/reference/omop_relations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"recursively extract omop concept relations of one passed - immediate relations with indication of relationship — omop_relations","text":"","code":"omop_relations(   c_id = NULL,   c_ids = NULL,   d_ids = NULL,   v_ids = NULL,   cc_ids = NULL,   standard = NULL,   r_ids = NULL,   itself = FALSE,   names2avoid = c(\"SNOMED CT core\", \"Defined\", \"Primitive\"),   messages = TRUE,   nsteps = 1,   add_step_column = TRUE,   join_names = TRUE )  orels(   c_id = NULL,   c_ids = NULL,   d_ids = NULL,   v_ids = NULL,   cc_ids = NULL,   standard = NULL,   r_ids = NULL,   itself = FALSE,   names2avoid = c(\"SNOMED CT core\", \"Defined\", \"Primitive\"),   messages = TRUE,   nsteps = 1,   add_step_column = TRUE,   join_names = TRUE )"},{"path":"https://catalamarti.github.io/omopcept/reference/omop_relations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"recursively extract omop concept relations of one passed - immediate relations with indication of relationship — omop_relations","text":"c_id single omop concept_id exact concept_name get relations , default NULL returns c_ids one concept_id filter , default NULL d_ids one domain_id filter , default NULL v_ids one vocabulary_id filter , default NULL cc_ids one concept_class_id filter , default NULL standard one standard_concept filter , default NULL , S,C r_ids one relationship_id filter , default NULL , e.g c('','Subsumes') whether include relations concept , default=FALSE names2avoid concept names avoid, defaults generic concepts lots relations, can set NULL messages whether print info messages, default=TRUE nsteps number recursions search add_step_column whether add column step level, default=TRUE join_names whether join concept_names, default=TRUE","code":""},{"path":"https://catalamarti.github.io/omopcept/reference/omop_relations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"recursively extract omop concept relations of one passed - immediate relations with indication of relationship — omop_relations","text":"dataframe concepts attributes ' non standard relationship_id","code":""},{"path":"https://catalamarti.github.io/omopcept/reference/omop_relations.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"recursively extract omop concept relations of one passed - immediate relations with indication of relationship — omop_relations","text":"","code":"omop_relations(\"Non-invasive blood pressure\") #> recursively querying concept relations of: Non-invasive blood pressure - may take more than a few seconds #> step 1 of 1 #>    querying concept relations of: Non-invasive blood pressure - may take a few seconds #> returning 8 concepts #> # A tibble: 9 × 14 #>   concept_id_1 concept_name_1        concept_id_2 concept_name_2 relationship_id #>          <int> <chr>                        <int> <chr>          <chr>           #> 1     36716965 Non-invasive blood p…     36716965 Non-invasive … Is              #> 2     36716965 Non-invasive blood p…     40642538 Primitive      Has status      #> 3     36716965 Non-invasive blood p…     40642539 SNOMED CT core Has Module      #> 4     36716965 Non-invasive blood p…      4326744 Blood pressure Is a            #> 5     36716965 Non-invasive blood p…      4354254 Non-invasive … Subsumes        #> 6     36716965 Non-invasive blood p…     36716283 Pressure       Has property    #> 7     36716965 Non-invasive blood p…      4014241 Structure of … Inheres in      #> 8     36716965 Non-invasive blood p…     36717771 Cardiac proce… Characterizes   #> 9     36716965 Non-invasive blood p…      4149267 Quantitative   Has scale type  #> # ℹ 9 more variables: valid_start_date <date>, valid_end_date <date>, #> #   invalid_reason <chr>, domain_id <chr>, vocabulary_id <chr>, #> #   concept_class_id <chr>, standard_concept <chr>, concept_code <chr>, #> #   step <dbl> omop_relations(\"Non-invasive blood pressure\",nsteps=2,r_ids=c('Is a','Subsumes')) #> recursively querying concept relations of: Non-invasive blood pressure - may take more than a few seconds #> step 1 of 2 #>    querying concept relations of: Non-invasive blood pressure - may take a few seconds #> returning 2 concepts #> step 2 of 2 #>    querying concept relations of: Non-invasive blood pressure - may take a few seconds #> returning 2 concepts #>    querying concept relations of: Blood pressure - may take a few seconds #> returning 29 concepts #>    querying concept relations of: Non-invasive arterial pressure - may take a few seconds #> returning 4 concepts #> # A tibble: 38 × 14 #>    concept_id_1 concept_name_1       concept_id_2 concept_name_2 relationship_id #>           <int> <chr>                       <int> <chr>          <chr>           #>  1     36716965 Non-invasive blood …     36716965 Non-invasive … Is              #>  2     36716965 Non-invasive blood …      4326744 Blood pressure Is a            #>  3     36716965 Non-invasive blood …      4354254 Non-invasive … Subsumes        #>  4     36716965 Non-invasive blood …      4326744 Blood pressure Is a            #>  5     36716965 Non-invasive blood …      4354254 Non-invasive … Subsumes        #>  6      4326744 Blood pressure            4080904 Wedge pressur… Subsumes        #>  7      4326744 Blood pressure            4090818 Venous pressu… Subsumes        #>  8      4326744 Blood pressure            4152194 Systolic bloo… Subsumes        #>  9      4326744 Blood pressure            4173359 Wedge pressur… Subsumes        #> 10      4326744 Blood pressure            4194579 24 hour blood… Subsumes        #> # ℹ 28 more rows #> # ℹ 9 more variables: valid_start_date <date>, valid_end_date <date>, #> #   invalid_reason <chr>, domain_id <chr>, vocabulary_id <chr>, #> #   concept_class_id <chr>, standard_concept <chr>, concept_code <chr>, #> #   step <dbl> #omop_relations(\"lenalidomide\") #omop_relations(1633308) #cmde <- omop_relations(v_ids=\"Cancer Modifier\") # because of R argument matching, you can just use the first unique letters of # arguments e.g. v for v_ids, cc for cc_ids chemodrugs <- orels(\"Cytotoxic chemotherapeutic\", v=\"HemOnc\", d=\"Regimen\") #> recursively querying concept relations of: Cytotoxic chemotherapeutic - may take more than a few seconds #> step 1 of 1 #>    querying concept relations of: Cytotoxic chemotherapeutic - may take a few seconds #> returning 0 concepts"},{"path":"https://catalamarti.github.io/omopcept/reference/omop_relations1step.html","id":null,"dir":"Reference","previous_headings":"","what":"find immediate omop concept relations of one passed ADVISORY instead to use omop_relations() with default nsteps=1 arg. — omop_relations1step","title":"find immediate omop concept relations of one passed ADVISORY instead to use omop_relations() with default nsteps=1 arg. — omop_relations1step","text":"find immediate omop concept relations one passed ADVISORY instead use omop_relations() default nsteps=1 arg.","code":""},{"path":"https://catalamarti.github.io/omopcept/reference/omop_relations1step.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"find immediate omop concept relations of one passed ADVISORY instead to use omop_relations() with default nsteps=1 arg. — omop_relations1step","text":"","code":"omop_relations1step(   c_id = NULL,   c_ids = NULL,   d_ids = NULL,   v_ids = NULL,   cc_ids = NULL,   standard = NULL,   r_ids = NULL,   itself = FALSE,   names2avoid = c(\"SNOMED CT core\", \"Defined\", \"Primitive\"),   join_names = TRUE,   messages = TRUE )"},{"path":"https://catalamarti.github.io/omopcept/reference/omop_relations1step.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"find immediate omop concept relations of one passed ADVISORY instead to use omop_relations() with default nsteps=1 arg. — omop_relations1step","text":"c_id single omop concept_id exact concept_name get relations , default NULL returns c_ids one concept_id filter , default NULL d_ids one domain_id filter , default NULL v_ids one vocabulary_id filter , default NULL cc_ids one concept_class_id filter , default NULL standard one standard_concept filter , default NULL , S,C r_ids one relationship_id filter , default NULL , e.g c('','Subsumes') whether include relations concept , default=FALSE names2avoid concept names avoid, defaults generic concepts lots relations, can set NULL join_names whether join concept names onto ids, default TRUE, FALSE used omop_relations() speed messages whether print info messages, default=TRUE","code":""},{"path":"https://catalamarti.github.io/omopcept/reference/omop_relations1step.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"find immediate omop concept relations of one passed ADVISORY instead to use omop_relations() with default nsteps=1 arg. — omop_relations1step","text":"dataframe concepts attributes","code":""},{"path":"https://catalamarti.github.io/omopcept/reference/omop_relations1step.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"find immediate omop concept relations of one passed ADVISORY instead to use omop_relations() with default nsteps=1 arg. — omop_relations1step","text":"","code":"omop_relations1step(\"Non-invasive blood pressure\") #>    querying concept relations of: Non-invasive blood pressure - may take a few seconds #> returning 8 concepts #> # A tibble: 8 × 13 #>   concept_id_1 concept_name_1        concept_id_2 concept_name_2 relationship_id #>          <int> <chr>                        <int> <chr>          <chr>           #> 1     36716965 Non-invasive blood p…     40642538 Primitive      Has status      #> 2     36716965 Non-invasive blood p…     40642539 SNOMED CT core Has Module      #> 3     36716965 Non-invasive blood p…      4326744 Blood pressure Is a            #> 4     36716965 Non-invasive blood p…      4354254 Non-invasive … Subsumes        #> 5     36716965 Non-invasive blood p…     36716283 Pressure       Has property    #> 6     36716965 Non-invasive blood p…      4014241 Structure of … Inheres in      #> 7     36716965 Non-invasive blood p…     36717771 Cardiac proce… Characterizes   #> 8     36716965 Non-invasive blood p…      4149267 Quantitative   Has scale type  #> # ℹ 8 more variables: valid_start_date <date>, valid_end_date <date>, #> #   invalid_reason <chr>, domain_id <chr>, vocabulary_id <chr>, #> #   concept_class_id <chr>, standard_concept <chr>, concept_code <chr>"},{"path":"https://catalamarti.github.io/omopcept/reference/omop_relations_multiple.html","id":null,"dir":"Reference","previous_headings":"","what":"extract omop concept relations of a vector of concept_ids - immediate relations with indication of relationship — omop_relations_multiple","title":"extract omop concept relations of a vector of concept_ids - immediate relations with indication of relationship — omop_relations_multiple","text":"extract omop concept relations vector concept_ids - immediate relations indication relationship","code":""},{"path":"https://catalamarti.github.io/omopcept/reference/omop_relations_multiple.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"extract omop concept relations of a vector of concept_ids - immediate relations with indication of relationship — omop_relations_multiple","text":"","code":"omop_relations_multiple(   mc_ids,   c_ids = NULL,   d_ids = NULL,   v_ids = NULL,   cc_ids = NULL,   standard = NULL,   r_ids = NULL,   itself = FALSE,   messages = TRUE,   nsteps = 1 )"},{"path":"https://catalamarti.github.io/omopcept/reference/omop_relations_multiple.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"extract omop concept relations of a vector of concept_ids - immediate relations with indication of relationship — omop_relations_multiple","text":"mc_ids vector multiple concept_id's get relations c_ids one concept_id filter , default NULL d_ids one domain_id filter , default NULL v_ids one vocabulary_id filter , default NULL cc_ids one concept_class_id filter , default NULL standard one standard_concept filter , default NULL , S,C r_ids one relationship_id filter , default NULL , e.g c('','Subsumes') whether include relations concept , default=FALSE messages whether print info messages, default=TRUE nsteps number recursions search","code":""},{"path":"https://catalamarti.github.io/omopcept/reference/omop_relations_multiple.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"extract omop concept relations of a vector of concept_ids - immediate relations with indication of relationship — omop_relations_multiple","text":"dataframe concepts attributes","code":""},{"path":"https://catalamarti.github.io/omopcept/reference/omop_relations_multiple.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"extract omop concept relations of a vector of concept_ids - immediate relations with indication of relationship — omop_relations_multiple","text":"","code":"orm <- omop_relations_multiple(c(3571338L,3655355L), r_ids=c('Is a','Subsumes'), nsteps=1) #> multiple-y querying concept relations of: 2 concepts - may take more than a few seconds #> recursively querying relations of: Problem behaviour 1/2 #> step 1 of 1 #>    querying concept relations of: Problem behaviour - may take a few seconds #> returning 0 concepts #> recursively querying relations of: Erectile dysfunction 2/2 #> step 1 of 1 #>    querying concept relations of: Erectile dysfunction - may take a few seconds #> returning 16 concepts #omop_relations_multiple(c(3571338L,3655355L), r_ids=c('Is a','Subsumes'), nsteps=2)"},{"path":"https://catalamarti.github.io/omopcept/reference/omop_relations_names.html","id":null,"dir":"Reference","previous_headings":"","what":"string search of concepts by name in the CONCEPT_RELATIONSHIP table — omop_relations_names","title":"string search of concepts by name in the CONCEPT_RELATIONSHIP table — omop_relations_names","text":"different (quicker) way finding relationships omop_relations() gets relations specified concept note names contained CONCEPT_RELATIONSHIP function joins CONCEPT query","code":""},{"path":"https://catalamarti.github.io/omopcept/reference/omop_relations_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"string search of concepts by name in the CONCEPT_RELATIONSHIP table — omop_relations_names","text":"","code":"omop_relations_names(   findstring,   ignore_case = TRUE,   exact = FALSE,   fixed = FALSE,   c_ids = NULL,   d_ids = NULL,   v_ids = NULL,   cc_ids = NULL,   standard = NULL,   messages = TRUE )  ornames(   findstring,   ignore_case = TRUE,   exact = FALSE,   fixed = FALSE,   c_ids = NULL,   d_ids = NULL,   v_ids = NULL,   cc_ids = NULL,   standard = NULL,   messages = TRUE )"},{"path":"https://catalamarti.github.io/omopcept/reference/omop_relations_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"string search of concepts by name in the CONCEPT_RELATIONSHIP table — omop_relations_names","text":"findstring search regex, e.g. \"^\" find starting ignore_case ignore case string comparison, default TRUE exact TRUE exact string search, \"start\" exact start, \"end\" exact end, default=FALSE str_detect fixed default FALSE allows regex,TRUE uses grepl exact matching c_ids one concept_id filter , default NULL d_ids one domain_id filter , default NULL v_ids one vocabulary_id filter , default NULL cc_ids one concept_class_id filter , default NULL standard one standard_concept filter , default NULL , S,C messages whether print info messages, default=TRUE","code":""},{"path":"https://catalamarti.github.io/omopcept/reference/omop_relations_names.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"string search of concepts by name in the CONCEPT_RELATIONSHIP table — omop_relations_names","text":"","code":"#1 min to return 38 concepts orn <- omop_relations_names(\"diffuse large B cell lymphoma\") #> returning 38 concepts #omop_relations_names(\"AJCC/UICC Stage\") #omop_relations_names(\"chemotherapy\", v_ids=\"LOINC\") #omop_relations_names(\"chemotherapy\", v_ids=c(\"LOINC\",\"SNOMED\"), d_ids=c(\"Observation\",\"Procedure\")) #set the findstring to \"\" to get all rows satisfying the other conditions #omop_relations_names(\"\", v_ids=\"Gender\") #omop_relations_names(\"\", d_ids=\"Type Concept\", standard=\"S\")"},{"path":"https://catalamarti.github.io/omopcept/reference/omop_vocab_table_save.html","id":null,"dir":"Reference","previous_headings":"","what":"save omop vocabulary parquet file from provided location to local package cache — omop_vocab_table_save","title":"save omop vocabulary parquet file from provided location to local package cache — omop_vocab_table_save","text":"default using UCLH github repo, option use local files","code":""},{"path":"https://catalamarti.github.io/omopcept/reference/omop_vocab_table_save.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"save omop vocabulary parquet file from provided location to local package cache — omop_vocab_table_save","text":"","code":"omop_vocab_table_save(   tablename = \"concept\",   from = NULL,   to = tools::R_user_dir(\"omopcept\", which = \"cache\"),   download_max_secs = 720 )"},{"path":"https://catalamarti.github.io/omopcept/reference/omop_vocab_table_save.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"save omop vocabulary parquet file from provided location to local package cache — omop_vocab_table_save","text":"tablename omop table download, defaults 'concept' url file source location, defaults UCLH filestore path save file locally, defaults package cache omopcept functions look download_max_secs max download secounds, default 720 = 12 mins","code":""},{"path":"https://catalamarti.github.io/omopcept/reference/omop_vocab_table_save.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"save omop vocabulary parquet file from provided location to local package cache — omop_vocab_table_save","text":"nothing","code":""},{"path":[]},{"path":"https://catalamarti.github.io/omopcept/reference/omop_vocabs_preprocess.html","id":null,"dir":"Reference","previous_headings":"","what":"read in omop vocabulary csvs downloaded from Athena, preprocess and write out as binary parquet files for better performance. — omop_vocabs_preprocess","title":"read in omop vocabulary csvs downloaded from Athena, preprocess and write out as binary parquet files for better performance. — omop_vocabs_preprocess","text":"default saves parquet files locally package cache omopcept functions can access","code":""},{"path":"https://catalamarti.github.io/omopcept/reference/omop_vocabs_preprocess.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"read in omop vocabulary csvs downloaded from Athena, preprocess and write out as binary parquet files for better performance. — omop_vocabs_preprocess","text":"","code":"omop_vocabs_preprocess(   from,   to = tools::R_user_dir(\"omopcept\", which = \"cache\") )"},{"path":"https://catalamarti.github.io/omopcept/reference/omop_vocabs_preprocess.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"read in omop vocabulary csvs downloaded from Athena, preprocess and write out as binary parquet files for better performance. — omop_vocabs_preprocess","text":"filepath omop vocab csvs stored path save parquet files locally, defaults package cache omopcept functions look","code":""},{"path":"https://catalamarti.github.io/omopcept/reference/omop_vocabs_preprocess.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"read in omop vocabulary csvs downloaded from Athena, preprocess and write out as binary parquet files for better performance. — omop_vocabs_preprocess","text":"nothing","code":""},{"path":[]},{"path":"https://catalamarti.github.io/omopcept/reference/omopcept-package.html","id":null,"dir":"Reference","previous_headings":"","what":"omopcept: Tools to query OMOP conCEPTs for standard health vocabularies (all pros no cons!) — omopcept-package","title":"omopcept: Tools to query OMOP conCEPTs for standard health vocabularies (all pros no cons!) — omopcept-package","text":"Access OMOP Common Data Model medical vocabularies flexible tidyverse compatible R functions querying.","code":""},{"path":[]},{"path":"https://catalamarti.github.io/omopcept/reference/omopcept-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"omopcept: Tools to query OMOP conCEPTs for standard health vocabularies (all pros no cons!) — omopcept-package","text":"Maintainer: Andy South southandy@gmail.com (ORCID)","code":""},{"path":"https://catalamarti.github.io/omopcept/reference/omopfreqconceptclass.html","id":null,"dir":"Reference","previous_headings":"","what":"count freq of values in an omop field EXPERIMENTAL may change — omopfreqconceptclass","title":"count freq of values in an omop field EXPERIMENTAL may change — omopfreqconceptclass","text":"count freq values omop field EXPERIMENTAL may change super short name func count freq values omop field","code":""},{"path":"https://catalamarti.github.io/omopcept/reference/omopfreqconceptclass.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"count freq of values in an omop field EXPERIMENTAL may change — omopfreqconceptclass","text":"","code":"omopfreqconceptclass(df1, sort = TRUE)  ofreqcc(df1, sort = TRUE)"},{"path":"https://catalamarti.github.io/omopcept/reference/omopfreqconceptclass.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"count freq of values in an omop field EXPERIMENTAL may change — omopfreqconceptclass","text":"df1 omop table sort whether sort freqs, default TRUE","code":""},{"path":"https://catalamarti.github.io/omopcept/reference/omopfreqconceptclass.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"count freq of values in an omop field EXPERIMENTAL may change — omopfreqconceptclass","text":"","code":"omop_relations(\"Non-invasive blood pressure\") |> omopfreqconceptclass() #> recursively querying concept relations of: Non-invasive blood pressure - may take more than a few seconds #> step 1 of 1 #>    querying concept relations of: Non-invasive blood pressure - may take a few seconds #> returning 8 concepts #> # A tibble: 4 × 2 #>   concept_class_id      n #>   <chr>             <int> #> 1 Qualifier Value       3 #> 2 Body Structure        2 #> 3 Model Comp            2 #> 4 Observable Entity     2"},{"path":"https://catalamarti.github.io/omopcept/reference/omopfreqdomain.html","id":null,"dir":"Reference","previous_headings":"","what":"count freq of values in an omop field EXPERIMENTAL may change — omopfreqdomain","title":"count freq of values in an omop field EXPERIMENTAL may change — omopfreqdomain","text":"count freq values omop field EXPERIMENTAL may change super short name func count freq values omop field","code":""},{"path":"https://catalamarti.github.io/omopcept/reference/omopfreqdomain.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"count freq of values in an omop field EXPERIMENTAL may change — omopfreqdomain","text":"","code":"omopfreqdomain(df1, sort = TRUE)  ofreqd(df1, sort = TRUE)"},{"path":"https://catalamarti.github.io/omopcept/reference/omopfreqdomain.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"count freq of values in an omop field EXPERIMENTAL may change — omopfreqdomain","text":"df1 omop table sort whether sort freqs, default TRUE","code":""},{"path":"https://catalamarti.github.io/omopcept/reference/omopfreqdomain.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"count freq of values in an omop field EXPERIMENTAL may change — omopfreqdomain","text":"","code":"omop_relations(\"Non-invasive blood pressure\") |> omopfreqdomain() #> recursively querying concept relations of: Non-invasive blood pressure - may take more than a few seconds #> step 1 of 1 #>    querying concept relations of: Non-invasive blood pressure - may take a few seconds #> returning 8 concepts #> # A tibble: 4 × 2 #>   domain_id              n #>   <chr>              <int> #> 1 Measurement            3 #> 2 Observation            3 #> 3 Metadata               2 #> 4 Spec Anatomic Site     1"},{"path":"https://catalamarti.github.io/omopcept/reference/omopfreqrelationship.html","id":null,"dir":"Reference","previous_headings":"","what":"count freq of values in an omop field EXPERIMENTAL may change — omopfreqrelationship","title":"count freq of values in an omop field EXPERIMENTAL may change — omopfreqrelationship","text":"count freq values omop field EXPERIMENTAL may change super short name func count freq values omop field","code":""},{"path":"https://catalamarti.github.io/omopcept/reference/omopfreqrelationship.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"count freq of values in an omop field EXPERIMENTAL may change — omopfreqrelationship","text":"","code":"omopfreqrelationship(df1, sort = TRUE)  ofreqr(df1, sort = TRUE)"},{"path":"https://catalamarti.github.io/omopcept/reference/omopfreqrelationship.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"count freq of values in an omop field EXPERIMENTAL may change — omopfreqrelationship","text":"df1 omop table sort whether sort freqs, default TRUE","code":""},{"path":"https://catalamarti.github.io/omopcept/reference/omopfreqrelationship.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"count freq of values in an omop field EXPERIMENTAL may change — omopfreqrelationship","text":"","code":"omop_relations(\"Non-invasive blood pressure\") |> omopfreqrelationship() #> recursively querying concept relations of: Non-invasive blood pressure - may take more than a few seconds #> step 1 of 1 #>    querying concept relations of: Non-invasive blood pressure - may take a few seconds #> returning 8 concepts #> # A tibble: 9 × 2 #>   relationship_id     n #>   <chr>           <int> #> 1 Characterizes       1 #> 2 Has Module          1 #> 3 Has property        1 #> 4 Has scale type      1 #> 5 Has status          1 #> 6 Inheres in          1 #> 7 Is                  1 #> 8 Is a                1 #> 9 Subsumes            1"},{"path":"https://catalamarti.github.io/omopcept/reference/omopfreqvocabulary.html","id":null,"dir":"Reference","previous_headings":"","what":"count freq of values in an omop field EXPERIMENTAL may change — omopfreqvocabulary","title":"count freq of values in an omop field EXPERIMENTAL may change — omopfreqvocabulary","text":"count freq values omop field EXPERIMENTAL may change super short name func count freq values omop field","code":""},{"path":"https://catalamarti.github.io/omopcept/reference/omopfreqvocabulary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"count freq of values in an omop field EXPERIMENTAL may change — omopfreqvocabulary","text":"","code":"omopfreqvocabulary(df1, sort = TRUE)  ofreqv(df1, sort = TRUE)"},{"path":"https://catalamarti.github.io/omopcept/reference/omopfreqvocabulary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"count freq of values in an omop field EXPERIMENTAL may change — omopfreqvocabulary","text":"df1 omop table sort whether sort freqs, default TRUE","code":""},{"path":"https://catalamarti.github.io/omopcept/reference/omopfreqvocabulary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"count freq of values in an omop field EXPERIMENTAL may change — omopfreqvocabulary","text":"","code":"omop_relations(\"Non-invasive blood pressure\") |> omopfreqvocabulary() #> recursively querying concept relations of: Non-invasive blood pressure - may take more than a few seconds #> step 1 of 1 #>    querying concept relations of: Non-invasive blood pressure - may take a few seconds #> returning 8 concepts #> # A tibble: 1 × 2 #>   vocabulary_id     n #>   <chr>         <int> #> 1 SNOMED            9"},{"path":"https://catalamarti.github.io/omopcept/reference/pipe_if.html","id":null,"dir":"Reference","previous_headings":"","what":"conditionally apply a pipe — pipe_if","title":"conditionally apply a pipe — pipe_if","text":"conditionally apply pipe","code":""},{"path":"https://catalamarti.github.io/omopcept/reference/pipe_if.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"conditionally apply a pipe — pipe_if","text":"","code":"pipe_if(df, cond, func)"},{"path":"https://catalamarti.github.io/omopcept/reference/pipe_if.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"conditionally apply a pipe — pipe_if","text":"df dataframe apply funct cond TRUE cond condition whether run func, vectorised (single logical) func function run","code":""},{"path":"https://catalamarti.github.io/omopcept/reference/pipe_if.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"conditionally apply a pipe — pipe_if","text":"","code":"#data.frame(a=c(1:5)) |> #   pipe_if(TRUE, \\(d) d |> #   mutate(b=a*2))"},{"path":"https://catalamarti.github.io/omopcept/news/index.html","id":"omopcept-0062-2025-03-05-dev-version","dir":"Changelog","previous_headings":"","what":"omopcept 0.0.6.2 2025-03-05 DEV version","title":"omopcept 0.0.6.2 2025-03-05 DEV version","text":"add arg nodetxtvar omop_graph() allow node label set column issue fixed omop_cdm_read() ID columns read double integer needed later joins omop_graph() working raw relations table e.g. omop_concept_relationship() |> head(50) |> collect() |> omop_graph(nodecolourvar=\"relationship_id\", nodetxtsize=3)","code":""},{"path":"https://catalamarti.github.io/omopcept/news/index.html","id":"omopcept-0061-2024-12-18","dir":"Changelog","previous_headings":"","what":"omopcept 0.0.6.1 2024-12-18","title":"omopcept 0.0.6.1 2024-12-18","text":"add helper functions omopfreq*() counting frequency values domain conceptclass relationship vocabulary split omop_graph_calc() separate calculation nodes & edges, either ) enable data joined (e.g. num records) visualisation b) nodes & edges can passed alternative renderer (yet unknown) split omop_graph_vis() enable data joined (e.g. num records) visualisation omop_graph() gets separate args nodesizevar nodesize size can set variable column /sizing param add omop_drug_lookup_create() create lookup table drugs RxNorm RxNorm Extension ATC drug classes levels update omop vocabs & default location pre-processed ones moved Github","code":""},{"path":[]},{"path":"https://catalamarti.github.io/omopcept/news/index.html","id":"breaking-changes-0-0-6-0","dir":"Changelog","previous_headings":"","what":"BREAKING CHANGES","title":"omopcept 0.0.6.0 2024-09-26","text":"make use omop_relations() easier intuitive * omop_relations_recursive() arg num_recurse changed nsteps * omop_relations_recursive() renamed omop_relations() turn renamed omop_relations1step() * omop_relations() now optionally adds column step plot colouring, replacing recurse_level","code":""},{"path":"https://catalamarti.github.io/omopcept/news/index.html","id":"non-breaking-changes-0-0-6-0","dir":"Changelog","previous_headings":"","what":"non-breaking changes","title":"omopcept 0.0.6.0 2024-09-26","text":"omop_graph() gets args caption captionsize captionjust captioncolour repository moved andysouth SAFEHR-data issue fixed omop_relations & omop_graph() colouring plots recurse_level omop_grap() gets nodesize arg (functioning yet) omop_grap() gets canvas arg set plot size, one “A4”,“A4l”,“A3”,“A3l”,“A2”,“A2l”,“A1”,“A1l”,“A0”,“A0l”,“slide”,“slidehalf”","code":""},{"path":"https://catalamarti.github.io/omopcept/news/index.html","id":"omopcept-0059-2024-07-24","dir":"Changelog","previous_headings":"","what":"omopcept 0.0.5.9 2024-07-24","title":"omopcept 0.0.5.9 2024-07-24","text":"omop_graph() gets args palettedirection nodetxtnudgex nodetxtnudgey titlejust backcolour omop_relations_recursive() gets arg add_recurse_column add column recurse_level can used colour","code":""},{"path":"https://catalamarti.github.io/omopcept/news/index.html","id":"omopcept-0058-2024-07-09","dir":"Changelog","previous_headings":"","what":"omopcept 0.0.5.8 2024-07-09","title":"omopcept 0.0.5.8 2024-07-09","text":"bugfix omop_cdm_combine(), defend ‘non-numeric argument binary operator’","code":""},{"path":"https://catalamarti.github.io/omopcept/news/index.html","id":"omopcept-0057-2024-06-12","dir":"Changelog","previous_headings":"","what":"omopcept 0.0.5.7 2024-06-12","title":"omopcept 0.0.5.7 2024-06-12","text":"omop_cdm_combine() outputs msg uniquefied fields","code":""},{"path":"https://catalamarti.github.io/omopcept/news/index.html","id":"omopcept-0056-2024-06-11","dir":"Changelog","previous_headings":"","what":"omopcept 0.0.5.6 2024-06-11","title":"omopcept 0.0.5.6 2024-06-11","text":"omop_cdm_combine() refactored make IDs unique didn’t omop_relations() gets names2avoid arg omop_graph() gets args nodealpha edgealpha edgewidth","code":""},{"path":"https://catalamarti.github.io/omopcept/news/index.html","id":"omopcept-0055-2024-05-10","dir":"Changelog","previous_headings":"","what":"omopcept 0.0.5.5 2024-05-10","title":"omopcept 0.0.5.5 2024-05-10","text":"omop_cdm_combine() gets make_care_site_id_unique & add_care_site_name_to_person_id_tables arg","code":""},{"path":"https://catalamarti.github.io/omopcept/news/index.html","id":"omopcept-0054-2024-05-09","dir":"Changelog","previous_headings":"","what":"omopcept 0.0.5.4 2024-05-09","title":"omopcept 0.0.5.4 2024-05-09","text":"omop_cdm_combine() gets make_person_id_unique arg","code":""},{"path":"https://catalamarti.github.io/omopcept/news/index.html","id":"omopcept-0053-2024-05-08","dir":"Changelog","previous_headings":"","what":"omopcept 0.0.5.3 2024-05-08","title":"omopcept 0.0.5.3 2024-05-08","text":"omop_graph() gets args nodetxtangle legendshow read omop cdm instance omop_cdm_read() & omop_cdm_table_read() combine cdm instances omop_cdm_combine()","code":""},{"path":"https://catalamarti.github.io/omopcept/news/index.html","id":"omopcept-0052-2024-03-13","dir":"Changelog","previous_headings":"","what":"omopcept 0.0.5.2 2024-03-13","title":"omopcept 0.0.5.2 2024-03-13","text":"add omop_codes() exact & fixed args, e.g. easier search loinc codes","code":""},{"path":"https://catalamarti.github.io/omopcept/news/index.html","id":"omopcept-0051-2024-03-01","dir":"Changelog","previous_headings":"","what":"omopcept 0.0.5.1 2024-03-01","title":"omopcept 0.0.5.1 2024-03-01","text":"omop_join_name() protects concept_id columns integer","code":""},{"path":"https://catalamarti.github.io/omopcept/news/index.html","id":"omopcept-0050-2024-01-30","dir":"Changelog","previous_headings":"","what":"omopcept 0.0.5.0 2024-01-30","title":"omopcept 0.0.5.0 2024-01-30","text":"started vignette hierarchy, access vignette(\"hierarchy--blood-counts\") omop_relations() add arg whether include relations concept , default=FALSE omop_names() add arg fixed (default=FALSE) true matches string -omop_domain() return domain_id s concept_id s omop_id() now accepts multiple ids can specify columns return + bit faster omop_concept_fields() omop_concept_ancestor_fields() omop_concept_relationship_fields() get column names omop tables, short name equivalents ocfields() ocafields() ocrfields() omop_join_name() made much faster using copy=true join BREAKING CHANGE omop_join_name() & omop_join_name_all() refactor simplify column args omop_join_name() arg columns=“” join concept table columns","code":""},{"path":"https://catalamarti.github.io/omopcept/news/index.html","id":"omopcept-0040-2024-01-08","dir":"Changelog","previous_headings":"","what":"omopcept 0.0.4.0 2024-01-08","title":"omopcept 0.0.4.0 2024-01-08","text":"fix bug omop_join_names_all() - Error class(df) == “list”","code":""},{"path":"https://catalamarti.github.io/omopcept/news/index.html","id":"omopcept-0030-2024-01-05","dir":"Changelog","previous_headings":"","what":"omopcept 0.0.3.0 2024-01-05","title":"omopcept 0.0.3.0 2024-01-05","text":"omop_names() added argument exact= TRUE exact string search, “start” exact start, “end” exact end omop_check_names() check concept names ids match passed table fix bug omop_join_name_all() cope “domain_concept_id_1” FACT_RELATIONSHIP omop_join_name_all() now copes list multiple tables update readme vocabulary download options","code":""},{"path":"https://catalamarti.github.io/omopcept/news/index.html","id":"omopcept-0020-2023-12-27","dir":"Changelog","previous_headings":"","what":"omopcept 0.0.2.0 2023-12-27","title":"omopcept 0.0.2.0 2023-12-27","text":"graph pkgs igraph,tidygraph,ggraph moved imports suggests num_recurse loop start 1 rather 0 omop_relations_multiple() & omop_relations_recursive()","code":""},{"path":"https://catalamarti.github.io/omopcept/news/index.html","id":"omopcept-0011-2023-11-15","dir":"Changelog","previous_headings":"","what":"omopcept 0.0.1.1 2023-11-15","title":"omopcept 0.0.1.1 2023-11-15","text":"omop_vocabs_preprocess() read omop vocab csvs, preprocess parquet save package cache omop_vocab_table_save() renamed omop_download() omop_graph() auto file naming omop_relations() add r_ids arg filter relationship_id e.g. c('','Subsumes') omop_relations_recursive() added recursively extract relations single concept","code":""},{"path":"https://catalamarti.github.io/omopcept/news/index.html","id":"omopcept-0010-2023-10-14","dir":"Changelog","previous_headings":"","what":"omopcept 0.0.1.0 2023-10-14","title":"omopcept 0.0.1.0 2023-10-14","text":"omop_graph() working visualising omop hierarchy ggraph domain, vocabulary, concept_code & concept_class optional args added omop_join_name() & omop_join_name_all() able also join columns namefull optional arg added omop_join_name() cope e.g. concept_id_2 omop_join_name_all() omop_relations() omop_concept_relationship() getting info immediate neighbour relationships bugfix, omop_ancestors() & omop_decsendants() filtering domin, separation etc., concept_id specified option NULL c_id omop_descendants() omop_ancestors(), returns concepts within filters","code":""},{"path":"https://catalamarti.github.io/omopcept/news/index.html","id":"omopcept-0009005-2023-08-08","dir":"Changelog","previous_headings":"","what":"omopcept 0.0.0.9005 2023-08-08","title":"omopcept 0.0.0.9005 2023-08-08","text":"optional argument (default FALSE) omop_descendants() omop_ancestors() optional separation argument (default NULL) omop_descendants() omop_ancestors() filters min_levels_of_separation e.g. c(1,2)","code":""},{"path":"https://catalamarti.github.io/omopcept/news/index.html","id":"omopcept-0009003-2023-06-14","dir":"Changelog","previous_headings":"","what":"omopcept 0.0.0.9003 2023-06-14","title":"omopcept 0.0.0.9003 2023-06-14","text":"omop_join_name_all() shortname copies functions interactive use ojoin() ojoinall() generalised omop_download() get omop tables omop_descendants() function query omop hierarchy omop_ancestors() shortname function copies . odesc() oance() added optional messages argument query functions","code":""},{"path":"https://catalamarti.github.io/omopcept/news/index.html","id":"omopcept-0009002-2023-05-15","dir":"Changelog","previous_headings":"","what":"omopcept 0.0.0.9002 2023-05-15","title":"omopcept 0.0.0.9002 2023-05-15","text":"renamed package omopcept renamed package functions make clearer, start omop_*() omop_id() search ids supershort name copies functions interactive use oid() onames() ocodes()","code":""}]
